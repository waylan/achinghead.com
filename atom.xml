<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>achinghead.com</title><link href="http://achinghead.com/" rel="alternate"></link><link href="http://achinghead.com/atom.xml" rel="self"></link><id>http://achinghead.com/</id><updated>2014-11-23T00:00:00-05:00</updated><entry><title>Newline-to-Break and Markdown</title><link href="http://achinghead.com/nl2br-markdown.html" rel="alternate"></link><updated>2014-11-23T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2014-11-23:nl2br-markdown.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;ve been giving a lot of thought lately to the behavior popularized by &lt;a href="https://help.github.com/articles/github-flavored-markdown/"&gt;GitHub Flavored Markdown&lt;/a&gt; where all newlines result in breaks (&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;). I am
not suggesting that &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; should change in any way, but I am trying to
clarify my opinion of the altered behavior (hereinafter &amp;lsquo;nl2br&amp;rsquo;) in certain
contexts.&lt;/p&gt;
&lt;p&gt;In the past I have always been openly against nl2br. This has likely been
because I&amp;rsquo;ve mostly written Markdown text from the command line (in vim). Any vi
or Emacs users can likely understand my aversion to nl2br (For those who are
unaware, line wrapping in text editors is a fairly new feature that is still not
the default in &amp;ldquo;real&amp;rdquo; command line text editors). That said, I also
understand the usefulness of nl2br in something like blog comments. Many (most)
commenters may not even be intermediate Markdown users and all they know is that
what they type and what appears after they submit looks the same (perhaps with
the exception of the font, etc).&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; So yes, in that context nl2br might make
sense.&lt;/p&gt;
&lt;p&gt;Even when editing long Markdown documents within a textarea in a browser, there
are some annoyances. For example indenting becomes a chore if the site devs
didn&amp;rsquo;t add some JavaScript to cause the tab key to type a tab character instead
of moving the cursor out of the textarea. And you&amp;rsquo;d better indent a long code
block in your editor (you do know how to indent multiple lines at once in your
editor don&amp;rsquo;t you?) before copying and pasting into a Markdown code block unless
you like hitting the space (remember&amp;mdash;no tab key) and arrow keys repeatedly.
But I digress. Textareas don&amp;rsquo;t offer the option of showing whitespace characters
(like any good text editor does) and it becomes difficult to work out when a
line ends with two spaces or not. And if the page doesn&amp;rsquo;t offer a preview&amp;mdash;it
becomes almost impossible to get it right.&lt;/p&gt;
&lt;p&gt;The point is, it seems to me that Markdown was created in a different era,
before people edited documents from within the browser. Therefore, &lt;em&gt;perhaps&lt;/em&gt;
some of the more recent altered behaviors make more sense in today&amp;rsquo;s world. This
has been something in the back of my mind lately. Perhaps the recent &lt;a href="http://spec.commonmark.org/"&gt;spec&lt;/a&gt;
written by J.M. has something to do with it as it addresses some of the
whitespace issues very &lt;a href="http://spec.commonmark.org/0.12/#example-490"&gt;nicely&lt;/a&gt;.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;However, in a discussion on a list for an unrelated code project, the developers
were considering a policy change to allow lines of code longer than 79 chars.
The idea was that almost no one uses command line editors anymore and it is silly
to restrict line length to 79 characters. It becomes a waste of screen real
estate and makes for some ugly code on occasion. The proposal was to lengthen
the maximum to the length of GitHub&amp;rsquo;s code display box (120 I think). Well,
actually that length minus 1 so that diffs won&amp;rsquo;t have to wrap when they add the
 &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; to the front of lines.&lt;/p&gt;
&lt;p&gt;And that last bit got me thinking. Didn&amp;rsquo;t I read someone say very recently that
one of the great things about Markdown is that is works really good with diff to
track changes (If it was you, sorry I forget where I read that)? I agree &amp;hellip;&lt;em&gt;if&lt;/em&gt; there are hard line breaks in the text. However, if the editors
line-wrapping feature is turned on (like all textareas and many modern editors)
and the author doesn&amp;rsquo;t manually add hard line breaks, then diff doesn&amp;rsquo;t work so
well.&lt;/p&gt;
&lt;p&gt;And there&amp;rsquo;s the rub.&lt;/p&gt;
&lt;p&gt;What if the nl2br feature only worked on lines shorter than &lt;code&gt;n&lt;/code&gt; chars long so
that we could have nl2br &lt;em&gt;and&lt;/em&gt; pretty diffs? But what should &lt;code&gt;n&lt;/code&gt; be? And what if
I want a hard break at char &lt;code&gt;n+1&lt;/code&gt;? Or more specifically, what if the hard break
was at &lt;code&gt;n-1&lt;/code&gt;, but then in a later edit to the beginning of the line, the end is
pushed out to &lt;code&gt;n+1&lt;/code&gt; and I don&amp;rsquo;t notice till much later? That seems like a
nonstarter to me.&lt;/p&gt;
&lt;p&gt;And even if that problem could be avoided, we still have ugly diffs with
unwrapped lines. Should we require all lines to be hard wrapped? How would that
get enforced in a browser? And while vim has tools built in to automatically
reconfigure the hard wrapping when you make a edit to some line in the middle of
a paragraph, most modern test editors don&amp;rsquo;t have that kind of feature&amp;mdash;or at
least no one knows about it if they do.&lt;/p&gt;
&lt;p&gt;It seems to me that while Markdown&amp;rsquo;s ease of reading and writing has made it the
go-to markup language for writing HTML when you don&amp;rsquo;t actually know HTML, it
actually makes a really lousy markup language for writing within a browser&amp;rsquo;s
textarea. Perhaps that is why there seems to be a proliferation of native
markdown editor applications of late. But even they don&amp;rsquo;t do hard line wrapping.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;It is interesting that GitHub does not even include nl2br behavior in
their list of &amp;ldquo;&lt;a href="https://help.github.com/articles/github-flavored-markdown/#differences-from-traditional-markdown"&gt;[d]ifferences from traditional
Markdown&lt;/a&gt;.&amp;rdquo;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;While I agree that the &lt;a href="http://spec.commonmark.org/"&gt;CommonMark Spec&lt;/a&gt; does offer some nice syntax (perhaps
even better in a few cases), I do not consider CommonMark to be &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;.
Perhaps a step-sister. I realize that some of its creators have tried to call it
a &amp;lsquo;better&amp;rsquo; Markdown, but I don&amp;rsquo;t see it as Markdown at all. Personally, I would
have preferred that the creators had openly acknowledged it as not being
Markdown, which would have given them the freedom to leave behind some of the
uglier parties of Markdown&amp;rsquo;s syntax. But that is a different subject for another
day.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="markdown"></category></entry><entry><title>Marking up Code</title><link href="http://achinghead.com/marking-up-code.html" rel="alternate"></link><updated>2014-11-23T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2012-05-31:marking-up-code.html</id><summary type="html">&lt;p&gt;In reviewing syntax highlighters, I have observed that there are as many
different ways to mark up a code fragment in HTML as there are highlighting
tools. In other words, every tool seems to define a different syntax. Some use
&lt;code&gt;pre&lt;/code&gt; tags, some use &amp;lsquo;code&amp;rsquo; tags, some use both, and then there are those that
use other elements like &lt;code&gt;div&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;The most obvious problem with this is that if you want to switch to a different
tool, you need to change all your old HTML documents to use the new syntax;
which could be a real time suck. Sure the process could be automated, but
writing a bug-free script could become just as painful as making the changes
manually.&lt;/p&gt;
&lt;p&gt;Another, perhaps less obvious issue is the semantics of the markup used. Does
the markup accurately convey what the content actually is? For example, many
people use &lt;code&gt;pre&lt;/code&gt; tags around code. Of course, the &lt;code&gt;pre&lt;/code&gt; element is specifically
for &amp;ldquo;preformatted text&amp;rdquo; which code often is. However, some have argued that
preformatted text is presentation, not semantics and therefore not the best
choice. Others have argued that the &lt;code&gt;code&lt;/code&gt; element does nothing more than a
&lt;code&gt;span&lt;/code&gt; under a different name and is therefore pointless. Some seem to subscribe
to both arguments and use other elements such as a &lt;code&gt;div&lt;/code&gt; with a predefined class
of their choosing.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The content of this post was originally authored in March of 2011. It was
then posted as a &lt;a href="https://gist.github.com/waylan/2844867"&gt;Gist&lt;/a&gt; on May 31,
2012. While the post wasn&amp;rsquo;t added to this site until 2014, the May 31, 2012
creation date has been preserved.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Who&amp;rsquo;s right? Unfortunately, the HTML4 specification does little to clear up the
matter. Interestingly however, the working draft of the HTML5 specification
provides some very clear direction on the matter.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the &lt;a href="http://dev.w3.org/html5/spec/Overview.html#the-pre-element"&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/a&gt; element first. The basis definition of a &lt;code&gt;pre&lt;/code&gt;
element is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;pre&lt;/code&gt; element represents a block of preformatted text, in which structure
is represented by typographic conventions rather than by elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, included in a list of example use cases in the specification is this item:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Including fragments of computer code, with structure indicated according to
  the conventions of that language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is an important theme in those two fragments of the Specification.
Sometimes, the structure of text is determined by typographic conventions, not
by HTML elements. More importantly, computer code is specifically mentioned as
fitting that mold. For an example, consider Python. Unlike many languages,
white-space is significant in Python code. The line breaks and indentation mean
something. However, a language like JavaScript does not require any white-space
for the computer to understand it. Curly brackets and other such characters
define the meaning of the text. Of course, for all but the simplest of
JavaScript fragments to be human readable, they still need to be presented with
white-space.&lt;/p&gt;
&lt;p&gt;Admittedly, after a code fragment has been passing through a syntax highlighter,
its structure is now represented by HTML elements. That being the case,
highlighted code may no longer belong in a &lt;code&gt;pre&lt;/code&gt; tag. However, before such a
tool is used the HTML5 specification makes it pretty clear that a &lt;code&gt;pre&lt;/code&gt; tag is
the appropriate way to go.&lt;/p&gt;
&lt;p&gt;Finally, note this comment in the specification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To represent a block of computer code, the &lt;code&gt;pre&lt;/code&gt; element can be used with a
&lt;code&gt;code&lt;/code&gt; element; &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are two things to note in that comment: (1) it is suggested that the &lt;code&gt;pre&lt;/code&gt;
and &lt;code&gt;code&lt;/code&gt; elements be used together, but (2) it is not a requirement (note the
use of &amp;ldquo;can&amp;rdquo; rather than &amp;ldquo;must&amp;rdquo; or &amp;ldquo;shall&amp;rdquo;), which begs the question; when do
you use one and when do you use both?&lt;/p&gt;
&lt;p&gt;I think the &lt;a href="http://dev.w3.org/html5/spec/Overview.html#the-code-element"&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt; specification answers that for us. For starters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;code&lt;/code&gt; element represents a fragment of computer code. This could be an
XML element name, a filename, a computer program, or any other string that a
computer would recognize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interestingly, the word &amp;ldquo;represents&amp;rdquo; in that text in the specification links to
this &lt;a href="http://dev.w3.org/html5/spec/Overview.html#represents"&gt;explanation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the absence of style-layer rules to the contrary (e.g. author style
sheets), user agents are expected to render an element so that it conveys to
the user the meaning that the element &lt;strong&gt;represents&lt;/strong&gt;, as described by this
specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the &lt;code&gt;code&lt;/code&gt; element is to &amp;ldquo;represent&amp;rdquo; &amp;lsquo;any string that a computer would
recognize&amp;rsquo; then it should be obvious that the &lt;code&gt;code&lt;/code&gt; element is always required
when representing computer code. The &lt;code&gt;pre&lt;/code&gt; element would only be used when that
computer code is &amp;ldquo;represented by typographic conventions rather than by
elements.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Perhaps the examples in the specification will clear this up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following example shows how the element can be used in a paragraph to mark
up element names and computer code, including punctuation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;code&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; element represents a fragment of computer
code.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;When you call the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;activate()&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; method on the
&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;robotSnowman&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; object, the eyes glow.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The example below uses the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;begin&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; keyword to indicate
the start of a statement block. It is paired with an &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;end&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
keyword, which is followed by the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; punctuation character
(full stop) to indicate the end of the program.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;Here we find &lt;code&gt;code&lt;/code&gt; tags without &lt;code&gt;pre&lt;/code&gt; tags. Of course, each of these &lt;code&gt;code&lt;/code&gt;
fragments do not require typographical conventions (white-space) to represent
their meaning. So, when the specification indicates that both &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt;
tags are not required for all code fragments, this is what is being referred to.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following example shows how a block of code could be marked up using the
pre and code elements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;language-pascal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;var i: Integer;
begin
   i := 1;
end.&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A class is used in that example to indicate the language used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here we find a code block which contains line breaks and indentation -
&amp;ldquo;typographical conventions.&amp;rdquo; I think it is safe to assume that both the &lt;code&gt;pre&lt;/code&gt;
and &lt;code&gt;code&lt;/code&gt; elements are required in this case. However, as previously mentioned,
after passing the block through a syntax highlighter, the &lt;code&gt;pre&lt;/code&gt; tag might be
swapped out for a &lt;code&gt;div&lt;/code&gt;, as the code will now be represented by elements.
Regardless, each individual fragment should be wrapped in a &lt;code&gt;code&lt;/code&gt; tag as it is
a &amp;ldquo;string that a computer would recognize.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Finally, did you notice that a class was used in that last example to indicate
the language of the code contained therein? The specification expounds on this
like so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although there is no formal way to indicate the language of computer code
being marked up, authors who wish to mark code elements with the language
used, e.g. so that syntax highlighting scripts can use the right rules, may do
so by adding a class prefixed with &amp;ldquo;language-&amp;rdquo; to the element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a number of interesting things to take away from that one sentence.
First, the explicitly stated use-case for indicating the language would be to
give instructions to syntax highlighting tools. The next logical step would be
that such tools would want to work out-of-the-box with the example markup
provided in the specification. That said, the specification specifically admits
that this is not a formal rule. Therefore, minor deviations can be expected.
Perhaps a specific tool adds additional features like optional line numbering.
As the specification doesn&amp;rsquo;t mention line numbering, that is up to the tool&amp;rsquo;s
implementer to work out. However, in whatever way that it is implemented, it
shouldn&amp;rsquo;t effect any competing tools ability to implement the basic feature of
identifying the language used.&lt;/p&gt;
&lt;p&gt;It should also be noted that the specification is careful to point out that the
convention of prefixing &amp;ldquo;language-&amp;rdquo; to the class of the element is only a
suggestion (note the expression: &amp;ldquo;&amp;hellip;may do so by&amp;hellip;&amp;rdquo;), albeit a reasonable one.
We wouldn&amp;rsquo;t want to invent some invalid attributes of our own, but we need a way
to identify which class (if there are more than one) specifically identifies the
language of the code. Admittedly, using the prefix &amp;ldquo;lang-&amp;rdquo; would be just as
effective. But for consistency&amp;rsquo;s sake, I&amp;rsquo;d prefer to stick with the suggested
model. Others are free to disagree on this point.&lt;/p&gt;
&lt;p&gt;Speaking of disagreements, I&amp;rsquo;ve seen arguments on mailing lists about which
element the language identifying class should be set on. Specifically, a class
set on a parent element provides a styling hook for either the parent
(&lt;code&gt;parent.class&lt;/code&gt;) or the child element (&lt;code&gt;parent.class child&lt;/code&gt;). However, when the
class is set on the child element, there is no easy way to specify the parent
element from CSS. With libraries that use CSS style selectors (like jQuery),
this same problem can translate to scripts as well. Even though it&amp;rsquo;s not too
hard to obtain the parent of an element in JavaScript, some people have argued
adamantly that the language identifying class should be set on the parent &lt;code&gt;pre&lt;/code&gt;
tag.&lt;/p&gt;
&lt;p&gt;So, why then, does the HTML5 Specification suggest that the class be set on the
child &lt;code&gt;code&lt;/code&gt; tag? I don&amp;rsquo;t have first-hand knowledge of what influenced the
specification authors, but keep in mind that a language designation is meta-data
specific to &amp;ldquo;code.&amp;rdquo; A &lt;code&gt;pre&lt;/code&gt; element can contain any variety of non-code content
(ASCII art, poems, etc.), but a &lt;code&gt;code&lt;/code&gt; element will always contain code, which
will presumably be identifiable with a specific language. Therefore, setting the
language class on the &lt;code&gt;code&lt;/code&gt; tag is more semantically correct.&lt;/p&gt;
&lt;p&gt;By way of example, how should this snippet&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; be interpreted?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;pre&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ascii&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
.......... __o
............\&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;,
.........() / ()
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We don&amp;rsquo;t have any &amp;ldquo;code&amp;rdquo; so no &lt;code&gt;code&lt;/code&gt; tag is used. However, some syntax
highlighting tools will try to process the ASCII art simply based on the fact
that a class was set on the &lt;code&gt;pre&lt;/code&gt; element. Do you see the problem? Without the
&lt;code&gt;code&lt;/code&gt; element, the script should recognize that this &lt;code&gt;pre&lt;/code&gt; element does not
contain code. Forcing the class on the &lt;code&gt;code&lt;/code&gt; element eliminates this
misunderstanding.&lt;/p&gt;
&lt;p&gt;Yes, it is evident that the HTML5 Specification authors gave some serious
thought to the semantics of marking up code in an HTML document. Even of you&amp;rsquo;re
not using HTML5, the basic guidelines still apply and should be a baseline for
all syntax highlighting script authors to strive for.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;That ASCII art was taken from the signature line of David Larson on the
&lt;a href="http://groups.google.com/group/framebuilders"&gt;Framebuilders list&lt;/a&gt;. I do not
know whether David is the originator of the artwork.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="html"></category><category term="syntax highlighting"></category></entry><entry><title>Syntax Highlighting on the Web</title><link href="http://achinghead.com/syntax-highlighting-web.html" rel="alternate"></link><updated>2010-01-30T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2010-01-30:syntax-highlighting-web.html</id><summary type="html">&lt;p&gt;Years ago I starting using &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; to markup text on this site. And
as is often the case today, I would include various code snippets in my posts. I
wanted those snippets to be highlighted like I saw on others sites (mostly
&lt;a href="http://trac.edgewall.org/"&gt;Trac&lt;/a&gt; instances at the time) and whatever text editor I may have been using.
As I soon learned, this is a &lt;a href="http://web.archive.org/web/20030407072903/http://www.paranoidfish.org/notes/2003/03/17/1845"&gt;problem&lt;/a&gt; that many people have had various
levels of success with for some time.&lt;/p&gt;
&lt;h2 id="the-background"&gt;The Background&lt;a class="headerlink" href="#the-background" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course, Trac was written in &lt;a href="http://python.org"&gt;Python&lt;/a&gt; and I like working with Python so I
thought I&amp;rsquo;d dig in and see if I could borrow from their code. It is a open
source project after all. Well, after a few false starts trying to piece
together their code, I finally came across something (not in the code itself)
that told me they were using a third part package which name escapes me now. The
package had horrible documentation and a little searching confirmed that most
people had as little success getting it to work as I did. I believe Trac has
since abandoned that package for a newer one which had not yet been released
when this was all going on.&lt;/p&gt;
&lt;p&gt;This lack of a good syntax highlighter for Python sent me on a search through
various possible solutions. In the course of that search, I learned a lot and
much of my opinions discussed below are drawn from that experience. I should
also note that the second &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt; extension I ever released &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
was the &lt;a href="http://www.freewisdom.org/projects/python-markdown/CodeHilite"&gt;CodeHilite&lt;/a&gt; extension. In it&amp;rsquo;s earliest form it called a command
line script which is available on most any Linux distributions and extracted and
slightly modified a snippet of html from the returned result do be included in a
Markdown document. It worked, but each snippet in a blog post would generate
another call to an external process and slow rendering down that much more.&lt;/p&gt;
&lt;p&gt;I looked at other solutions in various other languages and almost switched back
to PHP for some of the nice libraries offered in that language (i.e.:
&lt;a href="http://qbnz.com/highlighter/index.php"&gt;GeSHi&lt;/a&gt;). I also looked at Ruby, but it was brand new at the time and didn&amp;rsquo;t
have much in the way of third party libraries.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; I also found an interesting
JavaScript project called dp.SyntaxHighlighter. It had a few quirks, so I
wasn&amp;rsquo;t sold on it, but I did see it&amp;rsquo;s value so I built my extension with a
setting to either use the command line script or to spit out the wonky html
necessary for the JavaScript library to work (I believe it required a specially
classed or otherwise labeled textarea). Then, almost immediately after I
released my first version of the Python-Markdown extension, I came across the
newly released &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; library. I almost immediately added Pygments as a
third highlighting option and soon thereafter abandoned the others, leaving
Pygments as the sole highlighting library. A short time later, I was asked to
join the Python-Markdown project and didn&amp;rsquo;t spend much time on syntax
highlighting for quite a while.&lt;/p&gt;
&lt;p&gt;Before finding Pygments, I looked at starting my own library among other
things. At the time a syntax parser was a &lt;del&gt;little&lt;/del&gt; &lt;ins&gt;lot&lt;/ins&gt; over
my head, but I did find many examples that highlighted Python code. I even got
my own variation working with little trouble. If I recall correctly, it was the
first backend I built for my extension. However, I abandoned it before public 
release as it is one thing to get Python to tokenize Python code&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, but quite
another to get it to tokenize anything else. At the time I was writing more
about HTML/CSS than about Python, so this was a non-option.&lt;/p&gt;
&lt;h2 id="numbering-lines"&gt;Numbering Lines&lt;a class="headerlink" href="#numbering-lines" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another issue besides tokenizing the code into its various parts (keywords,
variables, integers, strings, comments, etc.), is line numbering. Some may argue
that this is an unnecessary feature, but try reading a tutorial as a beginner
about how to understand some snippet of code, and if the author doesn&amp;rsquo;t have an
easy way to indicate which line in the code he&amp;rsquo;s talking about, you could easily
get lost. Besides, it makes it easy for commenters to point to the exact error
they found in your code (Hey, it&amp;rsquo;s not my fault you didn&amp;rsquo;t test the code you&amp;rsquo;re
writing about).&lt;/p&gt;
&lt;p&gt;Even today it&amp;rsquo;s not uncommon to find lines of code broken up into table rows.
One row per line of code, with two columns, the first being the line number and
the second containing the actual code. With proper styling it looks nice, but
now try to select the code to copy and past into your editor. Oops, you got the
line numbers as well. Now you have to go back and delete the line number, the
punctuation following it (usually a period) and any white space added in without
messing up indentation and the like. The same problem presents itself with a
standard ordered list. Fortunately, that was solved a long time ago by &lt;a href="http://web.archive.org/web/20021006003116/webweaver.org/dan/css/corners/with_borders.html"&gt;Dan Loda&lt;/a&gt;, &lt;a href="http://web.archive.org/web/20021021220639/http://development.incutio.com/simon/numbered-code-experiment.html"&gt;Simon Willison&lt;/a&gt; (both via the Way Back Machine), and
&lt;a href="http://www.1976design.com/blog/archive/2004/07/29/redesign-tag-transform/"&gt;Dustan Orchard&lt;/a&gt; (scroll about half-way down that page). The trick is to style
your &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; so that the line numbers are displayed but don&amp;rsquo;t get copied.&lt;/p&gt;
&lt;p&gt;Interestingly, modern highlighters such as Pygments still have not solved this
problem. Pygments specifically still uses a table, of only one row and two
columns. The first column contains all the line numbers with line breaks in a
single cell and the second column contains all the lines of code, again with
line breaks in a single cell. Assuming your styling is correct, the line
numbers in the first column should line up with the corresponding lines in
column two. Unfortunately, I have seen many sites where this is broken.
Strangely, it seems to be more of a problem on longer snippets, so the site
designer probably didn&amp;rsquo;t catch it on his short test examples while adjusting
the styling to fit his site. On some very long snippets, the line numbers
actually end short of the number of lines. While, this allows one to select and
copy the code within one table cell and avoid getting line numbers, it simply is
not an acceptable solution. Someone really should write a new formatter for
Pygments that uses the much better ordered-list.&lt;/p&gt;
&lt;p&gt;One of the downsides of the ordered-list solution to line numbering is that if
the client has CSS turned off, the user will still get line numbers when
copying and pasting. But, how often does a user have CSS turned off and
JavaScript still on? I would guess not often enough to be a concern. Today a
number of JavaScript libraries exist which do the syntax highlighting and line
numbering themselves &amp;ndash; no server side code needed. So, in cases where CSS and 
JavaScript are disabled, the JavaScript will never run and the code blocks will
remain in their plain, unadulterated state ready for copying and pasting line
number free.&lt;/p&gt;
&lt;h2 id="the-un-styled-source"&gt;The Un-Styled Source&lt;a class="headerlink" href="#the-un-styled-source" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But there is something else interesting about Dustan Orchard&amp;rsquo;s solution. Even
if the line numbers were still a problem when it came to copying and pasting, a
link is provided to download each snippet as a separate file in its original
plain text form &amp;ndash; no line numbers anywhere. Unfortunately, for Dustan this
means each snippet needs to be in a separate file on his server. His code then
parses the post and finds each instance of his custom markup, determines where
the source file is, reads it from the file system, and inserts it into his HTML
line by line before sereving it. Not ideal. Besides, I am working with Markdown
where the snippets are inline with the body of text and simply marked as code
blocks according to Markdown&amp;rsquo;s syntax. How am I going to serve each snippet
separately, especially when I have multiple snippets in one document. I&amp;rsquo;m sure
it&amp;rsquo;s possible, but not really worth the effort in my opinion.&lt;/p&gt;
&lt;p&gt;I suppose one could include two copies of the snippet in the HTML document; one
styled and one not. Then with a little JavaScript, the user could toggle back
and forth between the two. But if your using JavaScript, there&amp;rsquo;s a better
option. &lt;/p&gt;
&lt;p&gt;Consider the project that I believe started life as that wonky
dp.SyntaxHighlighter library I spoke of earlier: &lt;a href="http://code.google.com/p/syntaxhighlighter/"&gt;SyntaxHighlighter&lt;/a&gt;. I
realize the link goes to an old abandoned version of the project, but go take a
look at the sample provided in the summary there. Notice the extra links at the
top of the screen capture? If it wasn&amp;rsquo;t just an image, clicking on them would
reveal that they are links, one of which gives you the option to &amp;ldquo;view plain&amp;rdquo;
code. The &lt;a href="http://alexgorbatchev.com/wiki/SyntaxHighlighter"&gt;newer version&lt;/a&gt; of the project gives you the same option as a little
pop-up when you hover your mouse over the block of code, as does the
&lt;a href="http://startbigthinksmall.wordpress.com/2008/10/30/beautyofcode-jquery-plugin-for-syntax-highlighting/"&gt;jQuery plugin&lt;/a&gt; adaptation of the library which actually outputs valid HTML.
Personally, I like the old styling better, but that should be customizable.&lt;/p&gt;
&lt;p&gt;The point is that this is only possible with JavaScript. As the server is
sending the document with the plain code wrapped in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;
tags, the code will display fine in browsers with CSS and/or JavaScript turned
off. However, with JavaScript enabled, we get the pretty version. However, as
we already have the original plain text version available client-side, its easy
to have JavaScript open a little pop-up window that displays the plain-text
code. While pop-ups are generally to be avoided, they are only used here when
specifically activated by the end user and they serve a useful purpose in this
context. I would imagine the end user could think that the plain code has
actually been fetched from the server as a separate file like Dustan Orchard&amp;rsquo;s 
site does. Except, the code displays instantaneously without the delay of a
request. And there&amp;rsquo;s no dance involved in including two versions and figuring
out which one to display and which one to hide by default. I suspect that&amp;rsquo;s why
at least one such JavaScript library (&lt;a href="http://softwaremaniacs.org/soft/highlight/en/"&gt;Highlight.js&lt;/a&gt;) markets itself as
working specifically with Markdown.&lt;/p&gt;
&lt;h2 id="the-state-of-javascript-libraries"&gt;The State of JavaScript Libraries&lt;a class="headerlink" href="#the-state-of-javascript-libraries" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like the server-side libraries, many of these JavaScript libraries accept
patches for additional languages or even have a mechanism for adding your own
extensions (&lt;a href="http://shjs.sourceforge.net/"&gt;SHJS&lt;/a&gt; provides an interesting solution for this). Really, you
have little to loose and much to gain by using them. A quick Google search
turned up this &lt;a href="http://www.webdesignbooth.com/9-useful-javascript-syntax-highlighting-scripts/"&gt;list of nine&lt;/a&gt; JavaScript libraries currently out there (not
counting SHJS mentioned earlier). Unfortunately, it appears that only two of
those (&lt;a href="http://pradador.com/code/lighterjs/"&gt;Lighter.js&lt;/a&gt; and &lt;a href="http://code.google.com/p/jquery-chili-js/"&gt;Chili&lt;/a&gt;) actually have solved the
line-numbers-in-copy-and-paste problem. Actually, most of them don&amp;rsquo;t even
support line numbering, but those that do all have a solution of one kind or
another.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; The worst part is, all of the libraries that generate line numbers
are jQuery or MooTools extensions. I&amp;rsquo;d really like a standalone solution that
actually output valid HTML (that last bit disqualifies SyntaxHighlighter).&lt;/p&gt;
&lt;p&gt;Another problem is that each of those JavaScript libraries uses a slightly
different syntax to determine what code blocks are to be highlighted and what
language to highlight them as. In other words, a library like Markdown can&amp;rsquo;t
just output all its code blocks using one format and expect it to work with any
JavaScript syntax highlighting library. And that&amp;rsquo;s a problem.&lt;/p&gt;
&lt;h2 id="the-sad-conclusion"&gt;The Sad Conclusion&lt;a class="headerlink" href="#the-sad-conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Something that may seem to be missing from this analysis is a good look at
libraries in languages other than Python and JavaScript. While that may be worth
doing, it&amp;rsquo;s beside the point really. Suppose you find a good library in language
X, but are forced to develop a project in language Y (perhaps due to
client/employer demands). Now that library is rather useless &amp;ndash; unless that
library happens to be in JavaScript and is not a plugin for a specific
JavaScript framework you also happen not to be using on this particular project.
I simply used the state of Python libraries above as examples
because that is what I am most familiar with. However, I have experienced the
same usability problems and annoyances on various sites developed on all sorts
of platforms. While we have come a long way, it is evident that we still have a
long way to go.&lt;/p&gt;
&lt;p&gt;So, yes, I think JavaScript libraries for syntax highlighting on the web are
the way of the future. I don&amp;rsquo;t expect to be putting much effort into
server-side solutions from here-on-out. Any efforts will be directed primarily
at the client-side offerings out there. Hopefully we can make them better.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The &lt;a href="http://www.freewisdom.org/projects/python-markdown/WikiLinks"&gt;first extension&lt;/a&gt; I released publicly was a simple little thing
that converted WikiLinks to links. It simply served as a means to better
understand Python-Markdown&amp;rsquo;s extension API. I had actually started the core
of my highlighting extension before the wikilink extension was thought of.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Ruby has since gained a few libraries since then. Two being
&lt;a href="http://ultraviolet.rubyforge.org/"&gt;Ultraviolet&lt;/a&gt; and &lt;a href="http://22bits.exofire.net/browse/code/colourcode"&gt;ColourCode&lt;/a&gt;, both of which I know nothing about.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;For those who don&amp;rsquo;t know, the Python tokenizer is callable from Python
code. It will return a list of tokens which you can easily iterate over and
build a bunch of appropriately styled spans for syntax highlighted Python
code on the web.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Actually that is not entirely true. For example, while Google&amp;rsquo;s own
library (&lt;a href="http://code.google.com/p/google-code-prettify/"&gt;google-code-prettify&lt;/a&gt;) does not directly support line numbers,
they suggest a rather lousy workaround on their &lt;a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html"&gt;FAQs&lt;/a&gt; page (second to
last FAQ). Ugh.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="css"></category><category term="html"></category><category term="markdown"></category><category term="python"></category><category term="syntax highlighting"></category></entry><entry><title>Python-Markdown Tutorial Part 2: Changing Bold and Italics</title><link href="http://achinghead.com/python-markdown-changing-bold-italics.html" rel="alternate"></link><updated>2009-07-12T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2009-07-12:python-markdown-changing-bold-italics.html</id><summary type="html">&lt;p&gt;In &lt;a href="/python-markdown-adding-insert-delete.html"&gt;part 1&lt;/a&gt;, we created a Python-Markdown extension which implements a new 
syntax for defining &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; tags. Now we need to alter Markdown&amp;rsquo;s 
existing syntax for bold and italics. As a reminder, your new syntax should 
look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Two hyphens for --delete--.
Two underscores for __insert__.
Two asterisks for **strong**.
Two slashes for //emphasis//.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we need to define our new regular expressions. We can just use the same
expressions from last time with a few modifications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;STRONG_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(\*\*)(.*?)\*\*&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMPH_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(\/\/)(.*?)\/\/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to insert these into the markdown parser. However, unlike with ins and del, we need to override the existing inline patterns. A quick look at the
&lt;a href="http://gitorious.org/python-markdown/mainline/blobs/master/markdown/__init__.py#line276"&gt;source&lt;/a&gt; indicates that strong and emphasis are currently implemented with 
four inline patterns; &amp;ldquo;strong&amp;rdquo;, &amp;ldquo;emphasis&amp;rdquo;, &amp;ldquo;emphasis2&amp;rdquo; and &amp;ldquo;strong_em&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s override &amp;ldquo;strong&amp;rdquo; first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="c"&gt;# Create new strong pattern&lt;/span&gt;
        &lt;span class="n"&gt;strong_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STRONG_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Override existing strong pattern&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strong_tag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that rather than &amp;ldquo;add&amp;rdquo;ing a new pattern before or after an existing 
pattern, we simple reassigned the value of a pattern named &amp;ldquo;strong&amp;rdquo;. This is
because the old pattern named &amp;ldquo;strong&amp;rdquo; already existed and we don&amp;rsquo;t need to 
change its location in the parser. So we simply assign a new pattern instance 
to it.&lt;/p&gt;
&lt;p&gt;We can do the same for emphasis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;emph_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EMPH_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;emphasis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;emphasis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emph_tag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have two old patterns left, &amp;ldquo;strong_em&amp;rdquo; and &amp;ldquo;emphasis2&amp;rdquo;. &amp;ldquo;Emphasis2&amp;rdquo;
was just a special case so that underscored_words were not mistaken for 
emphasis, but as our new syntax required double underscores, it&amp;rsquo;s not needed any
more. Therefore, we can delete it. The same applies for strong_em. With the old 
syntax, due to both strong and emphasis using the same characters, a special 
case was needed to match the two nested together (i.e.: &lt;code&gt;***like this***&lt;/code&gt;). 
Again this isn&amp;rsquo;t needed. We can delete the two in the same way we would delete 
dict items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;strong_em&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;emphasis2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That should do it. For completeness, the entire extension should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;

&lt;span class="n"&gt;DEL_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(--)(.*?)--&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;INS_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(__)(.*?)__&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STRONG_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(\*\*)(.*?)\*\*&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMPH_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(\/\/)(.*?)\/\/&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;del_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;gt;not_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ins_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INS_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ins_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;gt;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;strong_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STRONG_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strong_tag&lt;/span&gt;
        &lt;span class="n"&gt;emph_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EMPH_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;emphasis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;emphasis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emph_tag&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;strong_em&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;emphasis2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In part 3 (coming soon) we&amp;rsquo;ll combine all four of those patterns into one new
pattern. Yes, that means we&amp;rsquo;ll be writing our own InlinePattern class.&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Python-Markdown Tutorial Part 1: Adding InlinePatterns Insert and Delete</title><link href="http://achinghead.com/python-markdown-adding-insert-delete.html" rel="alternate"></link><updated>2009-06-24T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2009-06-24:python-markdown-adding-insert-delete.html</id><summary type="html">&lt;p&gt;A &lt;a href="http://six.pairlist.net/pipermail/markdown-discuss/2009-June/001591.html"&gt;recent question&lt;/a&gt; on the &lt;a href="http://six.pairlist.net/mailman/listinfo/markdown-discuss"&gt;markdown-discuss&lt;/a&gt; mailing list resulted in some
suggestions for an extension to &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;. I was able to point Simon
to the &lt;a href="http://www.freewisdom.org/projects/python-markdown/Writing_Extensions"&gt;documentation&lt;/a&gt; for writing extensions, but it occurs to me that that 
document could be a little overwhelming for a first-timer. Especially when all
he needs is to alter the behavior of a few inline patterns.&lt;/p&gt;
&lt;p&gt;So, without further ado, I present a tutorial which steps through creating a
Python-Markdown Extension which incorporates something similar to Simon&amp;rsquo;s
suggestion.&lt;/p&gt;
&lt;p&gt;First, we need to establish the syntax we will be implementing. While Simon&amp;rsquo;s 
suggestion would work as is, I&amp;rsquo;m more inclined to implement a slight variation
which follows the &lt;a href="http://txt2tags.sourceforge.net/userguide/BoldItalicUnderlineStrike.html#6_5"&gt;prior art&lt;/a&gt; of the &lt;a href="http://txt2tags.sourceforge.net/index.html"&gt;txt2tags&lt;/a&gt; project. Interestingly, the
&lt;a href="http://www.wikicreole.org/"&gt;CREOLE&lt;/a&gt; project more-or-less adopted this same syntax and has an interesting 
&lt;a href="http://www.wikicreole.org/wiki/BoldAndItalicsReasoning"&gt;explanation&lt;/a&gt; of the reasoning behind their community based decision. While I
may not agree with all their reasoning, I do like the idea that in each instance
double characters are used for markup. That way, there&amp;rsquo;s less chance of a single
character needing to be escaped - both for the machine and human reader. So, the
syntax looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Two hyphens for --strike--.
Two underscores for __underline__.
Two asterisks for **bold**.
Two slashes for //italic//.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first step is to create the boilerplate code that will be required by any
Python-Markdown Extension.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Insert code here to change markdown&amp;#39;s behavior.&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the above code as &lt;code&gt;mdx_myextension.py&lt;/code&gt;. Now, obviously, that code doesn&amp;rsquo;t
really do anything useful, but now that we have it in place, we can actually 
start implementing our new syntax.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s implement the one part of that syntax that doesn&amp;rsquo;t overlap with
Markdown&amp;rsquo;s standard syntax; the &lt;code&gt;--strike--&lt;/code&gt; syntax. I&amp;rsquo;m actually going to call 
it &amp;ldquo;del&amp;rdquo; (delete) rather than &amp;ldquo;strike&amp;rdquo; as the html generated will be the &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt;
tag.&lt;/p&gt;
&lt;p&gt;The first step is to write a regular expression to match the del syntax.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(--)(.*?)--&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, there are probably a few things I should explain about that. First, you may
note that the first set of hyphens (&lt;code&gt;(--)&lt;/code&gt;) are grouped in parentheses. This is 
because we will be using a generic pattern class provided by Python-Markdown.
Specifically, the &lt;code&gt;SimpleTextPattern&lt;/code&gt; which expects the text content to be found
in &lt;code&gt;group(3)&lt;/code&gt; of the regular expression. As the entire text (including markup)
will be in &lt;code&gt;group(1)&lt;/code&gt;, we add the extra group to force the content we want into
&lt;code&gt;group(3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, you may want to note that the content is matched using a non-greedy 
match &lt;code&gt;(.*?)&lt;/code&gt;. Otherwise, everything between the first occurrence and the last 
would all be placed inside one &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; tag, which we do not want.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s incorporate our regular expression into Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(--)(.*?)--&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Create the del pattern&lt;/span&gt;
        &lt;span class="n"&gt;del_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Insert del pattern into markdown parser&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;gt;not_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you noticed, we added two lines. The first line creates an instance of a
&lt;code&gt;SimpleTagPattern&lt;/code&gt;. This generic pattern class takes two arguments; the 
regular expression to match against (in this case &lt;code&gt;DEL_RE&lt;/code&gt;), and the name of 
the tag to insert the text of &lt;code&gt;group(3)&lt;/code&gt; into (&amp;ldquo;del&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;The second line adds our new pattern to the Markdown parser. In the event that 
it is not obvious, the &lt;code&gt;extendMarkdown&lt;/code&gt; method of any &lt;code&gt;markdown.Extension&lt;/code&gt; class is passed two arguments; &amp;ldquo;md&amp;rdquo; and &amp;ldquo;md_globals&amp;rdquo;. &amp;ldquo;md&amp;rdquo; is actually the instance
of the Markdown class. This allows you to alter anything you want in the class
from your extension. In this case, we are adding a new inline pattern named 
&amp;ldquo;del&amp;rdquo;, using our pattern instance &lt;code&gt;del_tag&lt;/code&gt; after the pattern named 
&amp;ldquo;not_strong&amp;rdquo; (thus the &lt;code&gt;'&amp;gt;not_strong'&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s test our new extension. Open a python interpreter in the same 
directory as you saved your file (&amp;ldquo;mdx_myextension.py&amp;rdquo;) and try the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo --deleted-- bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myextension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;u&amp;#39;&amp;lt;p&amp;gt;foo &amp;lt;del&amp;gt;deleted&amp;lt;/del&amp;gt; bar&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we passed in &amp;ldquo;myextension&amp;rdquo; as an extension name. Markdown 
automatically appended &amp;ldquo;mdx_&amp;rdquo; to the name and tried to import it. As long as
the file is on your PYTHONPATH, Markdown will find it and load the extension.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add our syntax for underline, or as I&amp;rsquo;m referring to it &lt;code&gt;__ins__&lt;/code&gt; for the &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(--)(.*?)--&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;INS_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;(__)(.*?)__&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;del_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEL_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;gt;not_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ins_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleTagPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INS_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinepatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ins_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;gt;del&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That should be self explanatory. We simply created a new pattern which matches
our &amp;ldquo;ins&amp;rdquo; syntax and added it after the &amp;ldquo;del&amp;rdquo; pattern. What&amp;rsquo;s interesting about 
this is that we do not even need to alter the existing bold syntax (&lt;code&gt;__bold__&lt;/code&gt;)
as our pattern has been inserted into the parser before the existing bold 
pattern (named &amp;ldquo;strong&amp;rdquo;). Therefore, by the time that the &amp;ldquo;strong&amp;rdquo; pattern gets
to run, our extension has already identified the double underscores as inserts,
so there&amp;rsquo;s no match against the &amp;ldquo;strong&amp;rdquo; pattern.&lt;/p&gt;
&lt;p&gt;Therefore, if all we wanted to implement was ins and del syntax we are done - 
well, except maybe giving it a decent name. Go ahead and test it out. That 
being the case, we&amp;rsquo;ll stop here, and pick up with &lt;a href="/python-markdown-changing-bold-italics.html"&gt;Part 2&lt;/a&gt; &lt;del&gt;(coming soon)&lt;/del&gt; where
we implement the new bold and italic syntax which replaces Markdown&amp;rsquo;s 
existing syntax.&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Nosetests, Generators and Descriptions</title><link href="http://achinghead.com/nosetests-generators-descriptions.html" rel="alternate"></link><updated>2009-06-12T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2009-06-12:nosetests-generators-descriptions.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;ve recently been playing around with the &lt;a href="http://somethingaboutorange.com/mrl/projects/nose/"&gt;nose&lt;/a&gt; testing framework for Python. It&amp;rsquo;s pretty slick! With the various hooks for plugins, one can make it work pretty much however one wants. And what I especially like is support for generators.&lt;/p&gt;
&lt;p&gt;That is, given a iterable of some kind, a test function can yield a series of tests. In my case, I actually am walking a directory structure and returning a separate test for each data file. Via a plugin, I&amp;rsquo;m even able to customize the output of these specific tests to alter the failure reports by removing unhelpful information and/or otherwise making them more useful. However, even with all this power, giving a meaningful name to each generated test is less than straightforward. There&amp;rsquo;s even a &lt;a href="http://code.google.com/p/python-nose/issues/detail?id=244"&gt;bug report&lt;/a&gt; regarding the issue.&lt;/p&gt;
&lt;p&gt;To illustrate, let&amp;rsquo;s look at a simple nose test function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def test_foo():
    &amp;quot;&amp;quot;&amp;quot; Test Foo &amp;quot;&amp;quot;&amp;quot;
    assert False, &amp;#39;Foo failed&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run that test and you&amp;rsquo;ll get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;F
======================================================================
FAIL: Test Foo
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python2.5/site-packages/nose-0.11.0-py2.5.egg/nose/case.py&amp;quot;, line 183, in runTest
    self.test(*self.arg)
  File &amp;quot;/home/waylan/tmp/nose/test_foo.py&amp;quot;, line 3, in test_foo
    assert False, &amp;quot;Foo failed&amp;quot;
AssertionError: Foo failed

----------------------------------------------------------------------
Ran 1 test in 0.014s

FAILED (failures=1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, as with Unittest, the description was pulled from the doc string. Alternatively, we could set a description attribute on the test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;test_foo.description = &amp;#39;Test Foo&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good. But now let&amp;rsquo;s move on to generators. A basic generator would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def run_bar(n):
    assert False, &amp;#39;Test %d failed&amp;#39; % n

def test_bar():
    for n in range(2):
        yield run_bar, n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output from running this test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FF
======================================================================
FAIL: test_foo.test_bar(0,)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python2.5/site-packages/nose-0.11.0-py2.5.egg/nose/case.py&amp;quot;, line 183, in runTest
    self.test(*self.arg)
  File &amp;quot;/home/waylan/tmp/nose/test_foo.py&amp;quot;, line 8, in run_bar
    assert False, &amp;#39;Test %d failed&amp;#39; % n
AssertionError: Test 0 failed

======================================================================
FAIL: test_foo.test_bar(1,)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python2.5/site-packages/nose-0.11.0-py2.5.egg/nose/case.py&amp;quot;, line 183, in runTest
    self.test(*self.arg)
  File &amp;quot;/home/waylan/tmp/nose/test_foo.py&amp;quot;, line 8, in run_bar
    assert False, &amp;#39;Test %d failed&amp;#39; % n
AssertionError: Test 1 failed

----------------------------------------------------------------------
Ran 2 tests in 0.014s

FAILED (failures=2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, in this simple case, test names like &lt;code&gt;test_foo.test_bar(1,)&lt;/code&gt; are not that bad. But start passing more complex arguments to your tests and things get ugly real fast. In my case, I&amp;rsquo;m passing a long string containing a file&amp;rsquo;s absolute path as well as a ConfigParser instance. Ugh. &lt;/p&gt;
&lt;p&gt;Oh, and if your wondering why I didn&amp;rsquo;t just use doc strings; that would simply give every test the same description, which isn&amp;rsquo;t very helpful. The first (and seemingly obvious solution) would be to use the description attribute. Something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def test_bar():
    for n in range(2):
        run_bar.description = &amp;#39;Test bar with %d&amp;#39; % n
        yield run_bar, n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, alas, every test now takes on the name of the very last test run! What!?! With some thought, I realized that every test was using the same instance of the test function. Therefore, by the time the report was generated, all the tests had already run, and the description attribute was always going to be for the last run test.&lt;/p&gt;
&lt;p&gt;Ah, but, if each test uses a different instance of the test, then perhaps the description of each test could be unique. So, I made the test function a callable class and set the description on each instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RunBaz:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;n&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;description&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;Test baz with %d&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;n&lt;/span&gt;):
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;%d failed&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_baz&lt;/span&gt;():
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;2&lt;/span&gt;):
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;RunBaz&lt;/span&gt;(&lt;span class="n"&gt;n&lt;/span&gt;), &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough, it works!:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FF
======================================================================
FAIL: Test baz with 0
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python2.5/site-packages/nose-0.11.0-py2.5.egg/nose/case.py&amp;quot;, line 183, in runTest
    self.test(*self.arg)
  File &amp;quot;/home/waylan/tmp/nose/test_foo.py&amp;quot;, line 18, in __call__
    assert False, &amp;#39;%d failed&amp;#39; % n
AssertionError: 0 failed

======================================================================
FAIL: Test baz with 1
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python2.5/site-packages/nose-0.11.0-py2.5.egg/nose/case.py&amp;quot;, line 183, in runTest
    self.test(*self.arg)
  File &amp;quot;/home/waylan/tmp/nose/test_foo.py&amp;quot;, line 18, in __call__
    assert False, &amp;#39;%d failed&amp;#39; % n
AssertionError: 1 failed

----------------------------------------------------------------------
Ran 2 tests in 0.018s

FAILED (failures=2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, the need to pass the arguments into the test twice (&lt;code&gt;yield RunBaz(n), n&lt;/code&gt;) is not very DRY. This would certainly work if the description needs to be built with more than just the arguments passed in for running the test. However, if we only need to use the arguments, we can make it a little simpler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RunBaz:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;n&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;description&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;Test baz with %d&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;%d failed&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_baz&lt;/span&gt;():
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;2&lt;/span&gt;):
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;RunBaz&lt;/span&gt;(), &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just set &lt;code&gt;self.description&lt;/code&gt; right in the &lt;code&gt;__call__&lt;/code&gt; method. &lt;del&gt;The output is exactly the same as before&lt;/del&gt; &lt;ins&gt;Upon further testing, it appears that this method does not work. Every test gets the name of the last test run for the same reason explained earlier&lt;/ins&gt;.&lt;/p&gt;
&lt;p&gt;But, now I see someone has recently described a &lt;a href="http://code.google.com/p/python-nose/issues/detail?id=244#c1"&gt;workaround&lt;/a&gt; in the bug report that uses functools&amp;rsquo; &lt;a href="http://docs.python.org/library/functools.html#functools.partial"&gt;partial&lt;/a&gt; method, which essentially does the same thing. &lt;/p&gt;
&lt;p&gt;Sigh. &lt;/p&gt;
&lt;p&gt;However, it appears that functools was only added to the standard library in Python 2.5. As I need to support earlier versions of Python, I guess my work was not all in vain. The important thing here is that generated tests in nose can have unique descriptions using a variety of methods. Pick whichever method meets your needs.&lt;/p&gt;
&lt;p&gt;Now go write some generated tests with helpful descriptions.&lt;/p&gt;</summary><category term="python"></category><category term="Python Nose"></category><category term="testing"></category></entry><entry><title>Git, Interactive Rebase and Ubuntu</title><link href="http://achinghead.com/git-interactive-rebase-and-ubuntu.html" rel="alternate"></link><updated>2008-12-12T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2008-12-12:git-interactive-rebase-and-ubuntu.html</id><summary type="html">&lt;p&gt;As mentioned &lt;a href="http://achinghead.com/archive/83/installing-multiple-versions-python/"&gt;previously&lt;/a&gt;, I have a Ubuntu VirtualBox VM set up for all my python development. As we use &lt;a href="http://git.or.cz/"&gt;Git&lt;/a&gt; for &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;, I installed Git via Ubuntu/Debian&amp;rsquo;s package manager with a simple &lt;code&gt;sudo aptitude install git&lt;/code&gt; &amp;ndash; or so I thought:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;waylan@dev:~$ git
bash: git: command not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, right! The &lt;a href="http://packages.ubuntu.com/gutsy/git"&gt;git package&lt;/a&gt; has nothing to do with Git. I have to use &lt;a href="http://packages.ubuntu.com/gutsy/git-core"&gt;git-core&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo aptitude install git-core
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, now that I had Git installed, I went on my way, hacking on code and committing each step of the way. Whoops, I just committed an incomplete patch. Oh well, I&amp;rsquo;ll commit the missing pieces separately, and use interactive rebase to squash the two commits. Hmm, what do I put for a commit message? Oh, who cares, it&amp;rsquo;s a throw-away message anyway&amp;hellip; And then I am horrified to discover that the version of Git I have is as 1.5.2.5 but interactive rebase wasn&amp;rsquo;t added until 1.5.3. Therefore, Python-Markdown has commits like &lt;a href="http://gitorious.org/projects/python-markdown/repos/mainline/commits/b443efad9ae25f8f8ab421907d71c2b87e3b095a"&gt;this&lt;/a&gt; and &lt;a href="http://gitorious.org/projects/python-markdown/repos/mainline/commits/971d605e2e1d0652b5ea161fe0c35a40d9685e5c"&gt;this&lt;/a&gt;. Grrr.&lt;/p&gt;
&lt;p&gt;Curiously, my primary machine has a new version of Git installed. Oh, right. Apt is broken on that machine (I haven&amp;rsquo;t bothered to debug it yet) and I had to manually download and install Git there. I might as well do the same on my dev VM. So, I go to the Git site, and to my delight, they host &lt;a href="http://www.backports.org/debian/pool/main/g/git-core"&gt;deb files&lt;/a&gt; of the most recent builds of Git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://www.backports.org/debian/pool/main/g/git-core/git-core_1.5.6.5-1~bpo40+1_i386.deb
sudo dpkg --install git-core_1.5.6.5-1~bpo40+1_i386.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s better. I type &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; and my editor opens with the last five commits (&lt;code&gt;HEAD~5&lt;/code&gt;) listed along with some helpful instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pick 358decd A few more tweaks to extension loading. We don&amp;#39;t test trying to load non-existant or broken extensions often enough. This should handle things better.
pick b443efa foo
pick 971d605 Revert &amp;quot;foo&amp;quot;
pick c669bf0 One more tweak to extension loading.
pick d6711cf Normalized stripTopLevelTags to be consistant regardless of any whitespace. For example, this would allow an extension to remove/replace &amp;#39;Prettify&amp;#39; treeprocessor with something that added more or less whitespace without adverse effects.

# Rebase c1f4bc1..d6711cf onto c1f4bc1
#
# Commands:
#  pick = use commit
#  edit = use commit, but stop for amending
#  squash = use commit, but meld into previous commit
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The instructions are pretty self explainitory. So I edit the file like so and save it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pick 358decd A few more tweaks to extension loading. We don&amp;#39;t test trying to load non-existant or broken extensions often enough. This should handle things better.
squash c669bf0 One more tweak to extension loading.
pick d6711cf Normalized stripTopLevelTags to be consistant regardless of any whitespace. For example, this would allow an extension to remove/replace &amp;#39;Prettify&amp;#39; treeprocessor with something that added more or less whitespace without adverse effects.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rebase runs with one more stop in the editor for me to edit the commit message. After saving that, the logs are now fixed up all nice and pretty. To bad I had pushed those changes public before the rebase. Now that others have cloned the bad commits, their clones will never merge properly with the fixed one. Oh well, at least I have the tools in place to avoid doing that again.&lt;/p&gt;
&lt;p&gt;One other cool (undocumented) feature of interactive rebase is that if you reorder the commits, they will be reordered in the log as well. In the event that the rebase runs into a conflict (which could easily happen when reordering) it will pause, allow you to fix the conflict and continue with the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git rebase --continue
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is one of the reasons I really like Git. As a distributed system, I can commit locally, edit/reorder/remove/combine those commits however I like and only when I am happy with everything, push those commits to a public repo for the world to see. Yes, that means I don&amp;rsquo;t push after each commit &amp;ndash; only after a feature is complete.&lt;/p&gt;</summary><category term="git"></category><category term="linux"></category><category term="Ubuntu"></category><category term="VirtualBox"></category></entry><entry><title>Installing multiple versions of Python on Ubuntu from Source</title><link href="http://achinghead.com/installing-multiple-versions-python.html" rel="alternate"></link><updated>2008-12-06T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2008-12-06:installing-multiple-versions-python.html</id><summary type="html">&lt;p&gt;In my efforts to fully test &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;, I need to have all versions of &lt;a href="http://python.org"&gt;Python&lt;/a&gt; that are supported by Python-Markdown. This is how I did it &amp;ndash; mostly for my own recollection in the event that I need to do it again. Perhaps others will find it useful as well.&lt;/p&gt;
&lt;p&gt;I had previously set up a virtual machine running &lt;a href="http://www.ubuntu.com/products/WhatIsUbuntu/serveredition"&gt;Ubuntu Server&lt;/a&gt; on &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;. By default, I had Python2.5 installed and working fine. Now, I realize that I could have simply done &lt;code&gt;apt-get python2.4&lt;/code&gt; and been done, but I wanted a few more versions. Particularly, Python 2.6 and Python 3.0, which are not yet available through Ubuntu/Debian&amp;rsquo;s standard package manager. There are ways to make it work, but I decided a simple install from source into &lt;code&gt;/opt&lt;/code&gt; was more strait forward. As I understand it, &lt;code&gt;/opt&lt;/code&gt; is where one would install &lt;em&gt;optional&lt;/em&gt; packages. Additionally, by installing from source with the changed location, each python version would be completely contained within a directory within &lt;code&gt;/opt&lt;/code&gt;. If I ever want to remove a version, all I need to do is delete that directory and any associated links.&lt;/p&gt;
&lt;p&gt;The first step is to ensure that all dependencies are installed. Run the following once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get build-dep python2.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will install a bunch of dev packages. Which packages get installed will likely depend of each specific system.&lt;/p&gt;
&lt;p&gt;As the remaining commands will need to be repeated for each version of python, I will list them once with X&amp;rsquo;s in place of the version numbers. Be sure to replace the X&amp;rsquo;s with the appropriate version numbers. The various versions and download links can be found on the Python &lt;a href="http://python.org/download/"&gt;download&lt;/a&gt; page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://python.org/ftp/python/X.X.X/Python-X.X.X.tgz
tar xvfz Python-X.X.X.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;Python-X.X.X
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/pythonX.X
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a couple versions I got some warnings after running &lt;code&gt;make&lt;/code&gt; about missing dependencies for things I don&amp;rsquo;t need or use, so I ignored them and everything worked fine. Of course, these need to be on my path to be useful so I created some links:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /opt/pythonX.X/bin/pythonX.X /usr/bin/python-X.X
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Python 3.0 I also created a link for &lt;code&gt;2to3&lt;/code&gt; so I could convert code to fit 3.0&amp;rsquo;s changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /opt/python3.0/bin/2to3 /usr/bin/2to3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing left to do is install some third-party python packages into each. Despite my dislike for some aspects of &lt;a href="http://pypi.python.org/pypi/setuptools/"&gt;SetupTools&lt;/a&gt;, it is an &lt;em&gt;easy&lt;/em&gt; way to install things quickly, so I installed it on each version. First I downloaded the latest source and unzipped it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.X.tar.gz
tar xvfz setuptools-0X.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;setuptools-0.X
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While I only needed to do the above once, I needed to install it in each version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo python2.X setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that, (to my knowledge) SetupTools is not yet available for Python 3.0, so I didn&amp;rsquo;t even try. But is worked fine for 2.3, 2.4 and 2.6. Finally, I created links to the various versions of &lt;code&gt;easy_install&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /opt/python2.X/bin/easy_install-2.X /usr/bin/easy_install2.X
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on, it&amp;rsquo;s easy to install a package for any version (except 3.0 which doesn&amp;rsquo;t have any third-party packages to speak of yet) of Python by simply running the appropriate &lt;code&gt;easy_install&lt;/code&gt;. For example, the upcoming version 2.0 of Python-Markdown requires &lt;a href="http://pypi.python.org/pypi/cElementTree"&gt;ElementTree&lt;/a&gt;. While ElementTree is part of the standard library in 2.5 and 2.6, it needs to be installed manually in 2.3 and 2.4. So the following will do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install2.4 celementree
sudo easy_install2.3 celementree
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After doing the same for a few other packages (such as &lt;a href="http://pypi.python.org/pypi/Pygments/1.0"&gt;Pygments&lt;/a&gt; for the &lt;a href="http://www.freewisdom.org/projects/python-markdown/CodeHilite"&gt;CodeHilite&lt;/a&gt; extension), I had a everything I needed. And to think it was rather painless.&lt;/p&gt;</summary><category term="linux"></category><category term="markdown"></category><category term="python"></category><category term="Ubuntu"></category><category term="VirtualBox"></category></entry><entry><title>Announcing Django-SpamBayes</title><link href="http://achinghead.com/announcing-django-spambayes.html" rel="alternate"></link><updated>2008-09-29T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2008-09-29:announcing-django-spambayes.html</id><summary type="html">&lt;p&gt;As many of you may know, there are various methods out there for blocking spam in comments, wiki pages, contact forms and other such publicly submitted data. One of the more popular is &lt;a href="http://akismet.com/"&gt;Akismet&lt;/a&gt;. Another is the &lt;a href="http://www.davidcramer.net/code/293/dealing-with-automated-form-submission-spam.html"&gt;&amp;ldquo;honey-pot&amp;rdquo;&lt;/a&gt; method. They both certainly have their place, but they both have their shortcomings as well. &lt;/p&gt;
&lt;p&gt;For example. While the &amp;ldquo;honey-pot&amp;rdquo; seems to do it&amp;rsquo;s job of blocking dumb spam-bots, what about spam from real live humans? The same applies to CAPTCHAs. Besides, it&amp;rsquo;s only a matter of time before someone writes a bot that works around a widely distributed honey-pot, like the one found in Django&amp;rsquo;s new &lt;a href="http://docs.djangoproject.com/en/dev/ref/contrib/comments/"&gt;contrib.comments&lt;/a&gt; app.&lt;/p&gt;
&lt;p&gt;And then there&amp;rsquo;s Akismet&amp;rsquo;s problems. As &lt;a href="http://bynotes.com/fiam/"&gt;Alberto G.&lt;/a&gt; &lt;a href="http://fi.am/entry/preventing-spam/"&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t like Akismet because it&amp;rsquo;s too simple. It only tells you if they think the comment is spam, so the best you can do is skip writing comments to the database. It would be nice if it returned a probability, so you could act accordingly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I couldn&amp;rsquo;t agree more. Interestingly, that&amp;rsquo;s exactly what an &lt;a href="http://www.paulgraham.com/better.html"&gt;e-mail statistical anti-spam filter&lt;/a&gt; does. It just so happens that the &lt;em&gt;best&lt;/em&gt; statistical anti-spam filter (IMO) happens to be written in pure Python. Meet &lt;a href="http://spambayes.sourceforge.net/"&gt;SpamBayes&lt;/a&gt;. There shouldn&amp;rsquo;t be any reason why I can&amp;rsquo;t tap into that from within my &lt;a href="http://djangoproject.com/"&gt;Django&lt;/a&gt; projects. It turns out I was right.&lt;/p&gt;
&lt;p&gt;Now, I realize many people think of SpamBayes as an Outlook plugin. While there is such a thing, it&amp;rsquo;s core is the Python &lt;code&gt;spambayes&lt;/code&gt; package which is available as opensource Python code under a MIT license. Cool! Additionally, the core devs have contemplated that the filter could be used in any number of setups and have made it easy to add your own backends and/or wrap SpamBayes within your own APIs. Unfortunately, there&amp;rsquo;s little documentation in this regard, but the source code is well commented and easy to follow.&lt;/p&gt;
&lt;p&gt;With little effort, I was able to create a storage backend for SpamBayes that wrapped a Django model. Once I had that, I could access the SpamBayes API from within any Django App. Thus, &lt;a href="http://code.google.com/p/django-spambayes/"&gt;Django-SpamBayes&lt;/a&gt; was born. Django-SpamBayes is a collection of utility applications for Django that utilize SpamBayes for spam filtering. Currently, two applications are available: &lt;a href="http://code.google.com/p/django-spambayes/source/browse/trunk/docs/djangobayes.txt"&gt;DjangoBayes&lt;/a&gt;, which wraps the Django model and provides the SpamBayes API; and &lt;a href="http://code.google.com/p/django-spambayes/source/browse/trunk/docs/commentbayes.txt"&gt;CommentBayes&lt;/a&gt;, which is an add-on to Django&amp;rsquo;s &lt;a href="http://docs.djangoproject.com/en/dev/ref/contrib/comments/"&gt;contrib.comments&lt;/a&gt; application and provides filtering and moderation of comments through signals.&lt;/p&gt;
&lt;p&gt;Unfortunately, the moderation features of contrib.comments is undocumented, but it you point your browser at &lt;code&gt;http://yourdomain.com/comments/moderate/&lt;/code&gt; you&amp;rsquo;ll get a nice admin-looking moderation interface. Perhaps in the future I&amp;rsquo;ll get it integrated into the admin itself.&lt;/p&gt;
&lt;p&gt;Until then, check out the &lt;a href="http://code.google.com/p/django-spambayes/"&gt;project page&lt;/a&gt; or get it from &lt;a href="http://pypi.python.org/pypi/django-spambayes/"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This blog is running on a &lt;em&gt;very old&lt;/em&gt; version of Django and for that reason, is not yet using Django-Spambayes for comment moderation. Hopefully someday&amp;hellip; At least there&amp;rsquo;s a simple &lt;a href="http://code.google.com/p/django-spambayes/source/browse/#svn/trunk/sb_demo"&gt;demo app&lt;/a&gt; in the Subversion repo.&lt;/p&gt;</summary><category term="anti-spam"></category><category term="django"></category><category term="python"></category></entry><entry><title>Reviewing Markdown -- A Response</title><link href="http://achinghead.com/reviewing-markdown-response.html" rel="alternate"></link><updated>2008-02-11T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2008-02-11:reviewing-markdown-response.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pyre.third-bit.com/"&gt;Greg Wilson&lt;/a&gt; has posted a &lt;a href="http://pyre.third-bit.com/blog/archives/1371.html"&gt;code review&lt;/a&gt; of &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;. Please &lt;a href="http://www.third-bit.com/pages/reviewing-markdown.html"&gt;read&lt;/a&gt; it before continuing. As I&amp;rsquo;m one of the developers, I read it with interest. This is my response.&lt;/p&gt;
&lt;p&gt;The purpose of this response it not to criticize Greg. Actually I welcome his criticisms, suggestions and questions. It&amp;rsquo;s always better to have more eyes on a project. That said, a newcomer isn&amp;rsquo;t always aware of the history behind a certain design decision, especially in the context of backward-compatibility. Therefore, my goal is to educate him (and anyone else reading this) on these and answer any questions he asks where I can.&lt;/p&gt;
&lt;p&gt;First, I haven&amp;rsquo;t been with the project for all that long, so my knowledge is limited in some areas as well. I&amp;rsquo;ve tried to defer to Yuri (the other developer and primary author of most of the code) to answer those questions. However, I have closely followed the Markdown community for some time (including all the various implementations in many languages) and am recently much more involved in Python-Markdown. There are certain things that I have found in the code that would be puzzling to me too, without this background.&lt;/p&gt;
&lt;p&gt;Another general observation of mine is that the code is sorely lacking in documentation like comments in some sections, while very well documented in others. I&amp;rsquo;ve slowly been working on that, but mostly only with the patches I&amp;rsquo;ve applied. In other words, if there are no comments in a section of code, I probably haven&amp;rsquo;t worked with it much. There are exceptions of course. I certainly feel Gregs&amp;rsquo; pain here, which only increases my appreciation for the time he has put into this.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve broken the rest of this document up into the same subheadings that Greg used and my responses are organized accordingly.&lt;/p&gt;
&lt;h3 id="getting-started"&gt;Getting Started&lt;a class="headerlink" href="#getting-started" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hmm, I suppose we removed the use of &lt;code&gt;random&lt;/code&gt; and &lt;code&gt;os&lt;/code&gt; at some point in the past. Guess I&amp;rsquo;ll remove those imports as well. Thanks. Btw, I believe random was used in the past as a replacement for the perl implementation&amp;rsquo;s use of hashes. This has since been replaced with the hard coded (and rather random looking string) in HTML_PLACEHOLDER. As a side note, I believe that markdown.pl&amp;rsquo;s biggest performance hit is its use of hashes and may be why python-markdown1 did not follow suit. It&amp;rsquo;s interesting that python_markdown2 still uses them and outperforms python-markdown1. Perhaps we need to reevaluate.&lt;/p&gt;
&lt;p&gt;You ask why we &lt;code&gt;__import__("optparse")&lt;/code&gt; rather than &lt;code&gt;import optparse&lt;/code&gt;. I could be wrong (as it was this way before I joined the project), but I believe this is for backward compatibility with python 2.3. Either optparse wasn&amp;rsquo;t part of the python core distribution or was under a different name or something like that. All I can say for sure; there was some weirdness with importing in the past. Yuri could probably provide a better answer here.&lt;/p&gt;
&lt;p&gt;Regarding the testing framework: It is in some serious need of upgrading IMO. In fact, some (many?) of the advertised features do not work. Things like hardcoding &lt;code&gt;/tmp&lt;/code&gt; are just the tip of the iceberg. There has been talk of porting markdown2&amp;rsquo;s testing to markdown1, but no work has been done yet. Once the 1.7 release is finalized (currently at release candidate 1 with a few minor bugs - although Greg has added a few more to the list), I&amp;rsquo;ll be focusing on testing.&lt;/p&gt;
&lt;h3 id="more-landmarks"&gt;More Landmarks&lt;a class="headerlink" href="#more-landmarks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Regarding safeMode: First, some background. safeMode used to be a boolean equating to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; and only did &amp;lsquo;replace&amp;rsquo;. If someone wanted to &amp;lsquo;remove&amp;rsquo;, they set HTML_REMOVED_TEXT to an empty string. Recently, we wanted to add support for escaping (which in my view should be the default when safeMode is on). However, we didn&amp;rsquo;t want to break everyones code when they upgraded markdown, so as long as safeMode equates to True (either &lt;code&gt;True&lt;/code&gt; or any non-empty string) then we assume the old way and &amp;lsquo;replace&amp;rsquo;. The only exceptions are if &amp;lsquo;escape&amp;rsquo; or &amp;lsquo;remove&amp;rsquo; are explicitly set. Had there not been this backward compatibility concern, I would have done things as Greg suggests. I suppose this is were better comments in the code would have helped.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll have to defer comments on ENABLE_ATTRIBUTES to Yuri. I&amp;rsquo;ve spent very little time inside the dom code. That&amp;rsquo;s his animal.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll also defer comments on BIDI and BOM to Yuri. I won&amp;rsquo;t pretend to be an expert on this stuff. Although, I will mention that the code on line 83 was part of a &lt;a href="http://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=1817528&amp;amp;group_id=153041&amp;amp;atid=790198"&gt;patch&lt;/a&gt; submitted by &lt;a href="http://www.pointy-stick.com/blog/"&gt;Malcolm Tredinnick&lt;/a&gt;. Malcolm is one smart cookie (he took the lead in converting &lt;a href="http://djangoproject.com"&gt;Django&lt;/a&gt; to only use Unicode internally) and so I took his word for it and committed his patch as is. As Greg acknowledges, it works. I never tested whether &amp;ldquo;Y if X else Z&amp;rdquo; would do the trick as well. &lt;/p&gt;
&lt;h3 id="nanodom"&gt;Nanodom&lt;a class="headerlink" href="#nanodom" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Regarding Greg&amp;rsquo;s comments on BLOCK_LEVEL_ELEMENTS, sets were not available until Python2.4 so that is not an option as we fully support Python2.3. However, Greg is correct; &lt;code&gt;is_block_level&lt;/code&gt; probably should be renamed to &lt;code&gt;isBlockLevel&lt;/code&gt; to be consistent. Thanks for the pointer.&lt;/p&gt;
&lt;p&gt;Yes, &lt;code&gt;&amp;lt;:wHR&amp;gt;&lt;/code&gt; on line 448 is a typo. I use vim. &lt;code&gt;:w&lt;/code&gt; is the command for write/save. Oops. At least it&amp;rsquo;s in a comment.&lt;/p&gt;
&lt;h3 id="preprocessors"&gt;Preprocessors&lt;a class="headerlink" href="#preprocessors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I agree with Greg&amp;rsquo;s comments regarding the way &lt;code&gt;stash&lt;/code&gt; is assigned to preprocessors. This has been on my todo list for some time. As things work in the current state, its not very high on the list (if its not broke, don&amp;rsquo;t fix it).&lt;/p&gt;
&lt;p&gt;Regarding Greg&amp;rsquo;s comments on the &lt;code&gt;LinePreprocessor&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yes, markdown syntax dictates that all codeblocks must be indented by at least 4 spaces.&lt;/li&gt;
&lt;li&gt;Markdown syntax also dictates that a &lt;hr&gt; must begin with at least 3 dashes.&lt;/li&gt;
&lt;li&gt;I believe the regex for blockquote used here was part of a much later ( and not very well thought out) bug fix.&lt;/li&gt;
&lt;li&gt;Its now obvious that the &lt;code&gt;LinePreprocessor&lt;/code&gt; could use some refactoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No doubt, it has become obvious at this point that intimate knowledge of markdown syntax will help in understanding the code. I suspect that Greg was reading the code, in part, to become more familiar with the syntax. I should note that &lt;a href="http://daringfireball.net"&gt;John Gruber&lt;/a&gt;&amp;lsquo;s syntax has the final say in most instances. Why, even of his own admission, markdown.pl is sometimes wrong and the syntax rules should be followed by authors of other implementations instead. Of course, the exception is when additional syntax has been agreed upon on the markdown list or by precedence set by the first implementation of a feature. In my observation, markdown.pl has always been the slowest to adopt/change, therefore I rarely use it as a reference. The &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;syntax rules&lt;/a&gt; however, &amp;hellip; well, memorize them. In my observation, anyone already familiar with markdown coming to a project that claims to use markdown expects it to conform to that specific set of rules in its entirety.&lt;/p&gt;
&lt;p&gt;And now the REFERENCE_PREPROCESSOR.  Any lines of text that begin with 4 or more lines of text are either a codeblock or a nested list item. Therefore, a reference is only a reference if it starts with three or less spaces. Sure, we could require no spaces, but most implementations are not that strict so neither are we. Again, this is an issue of meeting the existing syntax. I&amp;rsquo;ll also note that an understanding of Mr. Gruber&amp;rsquo;s goals and motives when creating the markdown syntax will clear any questions about allowing up to 3 spaces here (the short answer: a few spaces are hard for a human to see so we should allow them).&lt;/p&gt;
&lt;p&gt;HtmlBlockPreprocessor: There used to just be preprocessors. They all worked on the same api (they all got split lines &amp;ndash; or was is one string &amp;ndash; I forget) and either split or merged those lines as they needed.  Then, they were broken into preprocessors and textpreprocessors. The api for one takes split lines and the other a single string. Unfortunately, the comments and documentation were never updated to reflect this. It&amp;rsquo;s on my todo list. &lt;/p&gt;
&lt;p&gt;I should also mention that the HtmlBlockPreprocessor code gives me headaches as well. It was there before I came on board and I have generally avoided it with a few minor exceptions. Probably due for a refactor. Thanks for your tips.&lt;/p&gt;
&lt;h3 id="postprocessors"&gt;Postprocessors&lt;a class="headerlink" href="#postprocessors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As with preprocessors, there used to only be one type of postprocessor with a comment saying none existed in core, but that the footnote extension provided an example. Then, some complained that there was no escaping of html blocks (as I discussed above) and no easy way to override the default behavior. At the time, the code in &lt;code&gt;RawHtmlTextPostprocessor&lt;/code&gt; existed in the &lt;code&gt;convert&lt;/code&gt; method of the &lt;code&gt;Markdown&lt;/code&gt; class. I realized this could easily be made a postprocessor to make it easier to override. However, I needed it to work on a single string rather than the dom (there may be other approaches, but this was the approach already taken by the existing code), so I followed the example of the preprocessors. I just documented what I did in the comments. Had the preprocessors been properly documented, I suspect Greg would have pointed to the the Liskov Substitution Principle when discussing them. In any event, this is now on my todo list.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not quite sure why Greg is concerned that there is only one place in the code were escaping takes place. It seems more DRY to me, but maybe I&amp;rsquo;m missing something.&lt;/p&gt;
&lt;h3 id="inlinepatterns"&gt;InlinePatterns&lt;a class="headerlink" href="#inlinepatterns" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I appreciate Greg&amp;rsquo;s criticisms of the structure of the &lt;code&gt;InlinePatterns&lt;/code&gt;. The jumping back and forth has been an annoyance of mine as well. The problem is that the current api is relied upon by extensions and any change to the api would break existing extensions. It&amp;rsquo;s not that we are against a change, but it needs to be done right before it&amp;rsquo;s justified. There&amp;rsquo;s also the issue of nested inline patterns which Greg didn&amp;rsquo;t address here. That needs a better implementation and needs to be considered as well.&lt;/p&gt;
&lt;h3 id="core-markdown"&gt;Core Markdown&lt;a class="headerlink" href="#core-markdown" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First of all, despite the comments in the code to the contrary, I think that the core is less ugly than some of the other parts of the code. Of course, I have been working mostly within the core recently and have cleaned some of it up so my opinion may be tainted.&lt;/p&gt;
&lt;p&gt;On line 1889, the &lt;code&gt;convert&lt;/code&gt; method does &lt;code&gt;xml = xml.strip()[23:-7] + "\n"&lt;/code&gt; because of the output of the dom. I always thought that was a little strange myself and wondered why the dom&amp;rsquo;s &lt;code&gt;toxml&lt;/code&gt; method doesn&amp;rsquo;t do that. Yuri?&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;_transform&lt;/code&gt; lines that start with &lt;code&gt;#&lt;/code&gt; (headers in markdown syntax) are special because they don&amp;rsquo;t get the same treatment as any other block level sections. Namely, they can only be on one line. This is where that is enforced rather than the code that parses headers. Some recent hacking on the headers code was causing me headaches because I forgot about this restriction. This may be something else to refactor. Again, thanks for the pointer.&lt;/p&gt;
&lt;p&gt;Someday, if anyone ever finds the time, a thorough read of &lt;code&gt;_processSection&lt;/code&gt;, would be most welcome. This is probably closest to the top of my list for refactoring. I&amp;rsquo;d like to see an easy way to add block level sections through an extension mechanism and it&amp;rsquo;s not easy as is. Any and all suggestions are welcome. Of course, if you don&amp;rsquo;t no hard feelings.&lt;/p&gt;
&lt;p&gt;That concludes Greg&amp;rsquo;s review of the code. he seemed to skim the rest as he was tired. I&amp;rsquo;m glad he did. I&amp;rsquo;m tired as well. But is was fun. Thanks for the pointers Greg. I look forward to seeing Python-Markdown integrated into &lt;a href="http://www.drproject.org/"&gt;DrProject&lt;/a&gt;.&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Installing VirtualBox Binaries on a Ubuntu 7.10 (Gutsy Gibbon) Host</title><link href="http://achinghead.com/installing-virtualbox-binaries-ubuntu-710-gutsy-gi.html" rel="alternate"></link><updated>2008-01-30T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2008-01-30:installing-virtualbox-binaries-ubuntu-710-gutsy-gi.html</id><summary type="html">&lt;p&gt;I actually installed &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; on Xubuntu 7.10, but everything except the
window manager should be the same, so this should work fine for Ubuntu users as well. There is an open source edition of VirtualBox, but the closed binary offers USB support, and was actually very easy to install. Any instructions I found for older versions of Ubuntu required all sorts of manual steps that were all automated for me.&lt;/p&gt;
&lt;p&gt;First install some prerequisites (I simply copied these from &lt;a href="http://www.howtoforge.com/virtualbox_ubuntu"&gt;elsewhere&lt;/a&gt;.
They may not all be necessary, so YMMV):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo aptitude install bcc iasl xsltproc xalan libxalan110-dev uuid-dev zlib1g-dev libidl-dev libsdl1.2-dev libxcursor-dev libqt3-headers libqt3-mt-dev libasound2-dev libstdc++5 linux-headers-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt; build-essential
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then check the &lt;a href="http://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox download page&lt;/a&gt; for the url to add to your
&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;. I added the following lines to the end of that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Virtualbox Binaries under the PUEL licence&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://www.virtualbox.org/debian&lt;/span&gt; &lt;span class="kp"&gt;gutsy&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After saving that file, download and add the innotek public key for apt-secure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget -q http://www.virtualbox.org/debian/innotek.asc -O- &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now update your sources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo aptitude update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that finishes, your ready to install VirtualBox:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo aptitude install virtualbox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s it! Well, almost. After all, we&amp;rsquo;re using the binary distribution for 
USB support. To add USB support, as per &lt;a href="http://buranen.info/?p=187"&gt;these instructions&lt;/a&gt;, 
you&amp;rsquo;ll need to edit &lt;code&gt;/etc/init.d/mountdevsubfs.sh&lt;/code&gt; and uncomment 
lines 42 through 45:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#
# Magic to make /proc/bus/usb work
#
mkdir -p /dev/bus/usb/.usbfs
domount usbfs &amp;quot;&amp;quot; /dev/bus/usb/.usbfs -obusmode=0700,devmode=0600,listmode=0644
ln -s .usbfs/devices /dev/bus/usb/devices
mount --rbind /dev/bus/usb /proc/bus/usb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo /etc/init.d/mountdevsubfs.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming you had no problems, VirtualBox should be in your menu and
ready to use. The first time you launch, it will ask you to register. Then your
ready to start adding virtual machines.&lt;/p&gt;</summary><category term="linux"></category><category term="Ubuntu"></category><category term="VirtualBox"></category></entry><entry><title>Announcing the Meta-Data Extension for Python-Markdown</title><link href="http://achinghead.com/announcing-meta-data-extension-python-markdown.html" rel="alternate"></link><updated>2007-10-03T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2007-10-03:announcing-meta-data-extension-python-markdown.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m proud to announce the &lt;a href="http://achinghead.com/markdown/meta-data/"&gt;Meta-Data Extension&lt;/a&gt; for &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve &lt;a href="http://achinghead.com/archive/67/adding-wikilinks-to-markdown-in-python/"&gt;mentioned&lt;/a&gt; in the past my desire to build some sort of paging (wiki-like) system using Markdown. With a database, that&amp;rsquo;s pretty easy, but for a simple file based system, there needs to be meta-data for each file. Information like &amp;lsquo;Title&amp;rsquo;, &amp;lsquo;Summary&amp;rsquo;, &amp;lsquo;Author&amp;rsquo;, &amp;lsquo;Date&amp;rsquo;, etc. &lt;a href="http://fletcherpenney.net/MultiMarkdown"&gt;MultiMarkdown&lt;/a&gt; offers just such a solution with its &lt;a href="http://fletcherpenney.net/MultiMarkdown_Syntax_Guide#metadata"&gt;Meta-Data&lt;/a&gt; feature. Of course, MultiMarkdown is in perl, so I&amp;rsquo;d have to build my own in python.&lt;/p&gt;
&lt;p&gt;It turns out that it&amp;rsquo;s not to hard. I had ironed out the wrinkles of pre-processors with my &lt;a href="http://achinghead.com/markdown/abbr/"&gt;abbreviation&lt;/a&gt; extension, so I whipped up a solution in a few hours time. It probably would have been even less, but I had numerous interruptions. In any event, the extension simply extracts the data from the document and makes it available for use by other code. Perhaps someday I&amp;rsquo;ll write an app that passes such data to a templating system.&lt;/p&gt;
&lt;p&gt;Until then, it is very handy for configuring settings for various other extensions on a per document basis. Therefore, I have updated both the &lt;a href="http://achinghead.com/markdown/abbr/"&gt;abbreviation&lt;/a&gt; and &lt;a href="http://achinghead.com/markdown/wikilink/"&gt;wikilink&lt;/a&gt; extensions to support the Meta-Data Extension. Read the &lt;a href="http://achinghead.com/markdown/meta-data/"&gt;docs&lt;/a&gt; for all the details, or view the &lt;a href="https://code.achinghead.com/browser/mdx/meta/trunk/mdx_meta.py"&gt;code&lt;/a&gt; (&lt;a href="https://code.achinghead.com/browser/mdx/meta/trunk/mdx_meta.py?format=raw"&gt;raw&lt;/a&gt;).&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Announcing the Abbreviation Extension for Python-Markdown</title><link href="http://achinghead.com/announcing-abbreviation-extension-python-markdown.html" rel="alternate"></link><updated>2007-08-22T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2007-08-22:announcing-abbreviation-extension-python-markdown.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m proud to announce the &lt;a href="http://achinghead.com/markdown/abbr/"&gt;Abbreviation Extension&lt;/a&gt; for &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some time ago, &lt;a href="http://www.kulleen.org/blog/"&gt;Seemant Kulleen&lt;/a&gt; sent me an email asking for help. Apparently he was trying to adapt the code in my &lt;a href="http://achinghead.com/markdown/wikilink/"&gt;wikilink&lt;/a&gt; extension to write an abbreviation/acronym extension for &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;. At the time I was way to busy and didn&amp;rsquo;t even read over his code. Although, I believe I did send a short reply. I&amp;rsquo;m not that rude.&lt;/p&gt;
&lt;p&gt;After some time had passed, I noticed Seemant had &lt;a href="http://www.kulleen.org/seemant/blog/2007/jun/05/building-my-django-weblog-part-65/"&gt;posted&lt;/a&gt; his non-working code to his blog and expressed his frustrations. As I noted in my comment to that post, I  was able to get his code working with only a few minor adjustments. After some private emailing back and forth, Seemant indicated that  the code was mine to do with as I pleased. It looked something like &lt;a href="https://code.achinghead.com/browser/mdx/abbr/trunk/mdx_acronyms.py?rev=47"&gt;this&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;But, before I released it, I checked the syntax to see if Seemant had followed the previously established syntax in &lt;a href="http://www.michelf.com/projects/php-markdown/extra/#abbr"&gt;PHP Markdown Extra&lt;/a&gt;. He hadn&amp;rsquo;t. We&amp;rsquo;ll give him the benefit of the doubt and assume he wasn&amp;rsquo;t aware a syntax had already been established. Regardless, I set the code aside and forgot about it.&lt;/p&gt;
&lt;p&gt;Then, the other week I was going through some of my working files and deleting old dead stuff, or at least archiving it out of the way, and stumbled on that code. It occurred to me that I could use the &lt;code&gt;Pattern&lt;/code&gt; class we already have and pass it a different pattern for each abbreviation defined by reference. True, this would add another instance of the class for each abbreviation, but, given the fact that the extension hasn&amp;rsquo;t existed for some time, it can be assumed that most documents would contain very few abbreviation definitions. So, why not? After fighting with the preprocessor bit, I have &lt;a href="https://code.achinghead.com/browser/mdx/abbr/trunk/mdx_abbr.py"&gt;working code&lt;/a&gt;. Perhaps it&amp;rsquo;s not the best approach, but it works.&lt;/p&gt;
&lt;p&gt;My future plans for the extension include the ability to define a default set of abbreviations which will automatically be applied to any markdown text, even if they are not defined within the document itself. Of course, this should be turned off by default, but a simple switch is much quicker and easier that copying the same abbreviations from document to document. I anticipate offering the ability to define them in code (perhaps as a python dict) or as a file (default location being the same as the source file). I suspect my approach to the code will need to change for this to work effectively. I have a few ideas, but any suggestions in this regard are welcome.&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Clipless Glove: Researching Pedals</title><link href="http://achinghead.com/clipless-glove-researching-pedals.html" rel="alternate"></link><updated>2007-08-01T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2007-08-01:clipless-glove-researching-pedals.html</id><summary type="html">&lt;p&gt;My first task in finding a working solution for the &amp;ldquo;&lt;a href="http://achinghead.com/archive/75/clipless-glove-and-open-prosthetics-project/"&gt;Clipless Glove&lt;/a&gt;&amp;rdquo; is to determine which clipless pedal system I want to use. To get an idea of the large number of designs developed over the years, check out this cool &lt;a href="http://www.speedplay.com/index.cfm?fuseaction=pedalmuseum.intro"&gt;museum&lt;/a&gt;. Obviously, whatever system I choose, I want replacement parts/clips to be readily available. Thus, most of the systems in that gallery are out.&lt;/p&gt;
&lt;p&gt;First, I&amp;rsquo;ve considered the basic mounting requirements. As the clip (most likely pulled from a pedal) has to be mounted to a handlebar, I need some sort of clamp. Last night I whipped up this basic concept:&lt;/p&gt;
&lt;p&gt;&lt;img alt="half block" src="http://media.achinghead.com/pics/half-block.png" /&gt;&lt;/p&gt;
&lt;p&gt;As I haven&amp;rsquo;t chosen a specific clipping system, I don&amp;rsquo;t have any specific dimensions. This is just a rough mock-up to help visualize what I&amp;rsquo;m trying to do. The exact size and placement of the holes (presumably for screws) would be completely dependent on factors that have not yet been determined. In any event, screwing two of these together around the handlebar would provide for a mounting surface. Alternatively, with a few modifications to the above block, something could mount directly to the block, pinching the handlebar between them.&lt;/p&gt;
&lt;p&gt;I also considered a strap of some kind, but I need a sturdy mounting surface. Remember, I don&amp;rsquo;t want the arm length extended any more than necessary. The above block sturdies the device from the back-side of the bar, allowing the front side to remain thin. A strap would accomplish the opposite.&lt;/p&gt;
&lt;p&gt;Keeping things low profile rules out most rode bike systems. A quick look though the above mentioned museum should be plenty evidence of that. In fact, even &lt;a href="http://www.speedplay.com"&gt;Speedplay&lt;/a&gt;&amp;lsquo;s very slick &lt;a href="http://www.speedplay.com/index.cfm?fuseaction=home.lightaction"&gt;road system&lt;/a&gt; has massive clips compared to off-road systems. Which is to bad. I really like the pedal design. Imagine one half of that pedal mounted to a modified variation of the above block. Very slick! However, I just can&amp;rsquo;t get past that shoe clip being mounted to the palm of any glove, even if it is lower profile than any other road system on the market.&lt;/p&gt;
&lt;p&gt;Which brings me to the &lt;a href="http://www.speedplay.com/index.cfm?fuseaction=home.frog"&gt;Frog&lt;/a&gt;, Speedplay&amp;rsquo;s off-road pedal system. While the pedal is not quite at low-profile, it&amp;rsquo;s not that bad. Additionally, like their road pedals, the pedal splits in half very easily. Check this image from their &lt;a href="http://www.speedplay.com/pubs/Frog_Instructions_10_06_06w.pdf"&gt;instruction manual&lt;/a&gt; (pdf):&lt;/p&gt;
&lt;p&gt;&lt;img alt="frog explode" src="http://media.achinghead.com/pics/frog-explode.png" /&gt;&lt;/p&gt;
&lt;p&gt;Half of that could easily mount to a modified variation of my block. &lt;/p&gt;
&lt;p&gt;One thing I&amp;rsquo;m not sure about is the non-centering free float that all Speedplay systems have. While I can see the benefits in a pedal, I&amp;rsquo;m not sure if the 20 degrees if free movement would constitute sloppiness in a handlebar situation. On the other hand, it is possible that that it is exactly what is needed, considering the need for rotation when steering. But then there&amp;rsquo;s the concern that it may release if the rider was to turn a little to sharp to the left. While the fact that it will only release when turned one direction lessens that concern, what if the bar turns sharp to the right during a mishap and the rider is not able to twist their wrist far enough the other direction to release before they land on their head? The only way to know the answers to these questions is to test with real products. But at an MSRP of $105 for something that may or may not work&amp;hellip; well, you get the idea. Now, if Speedplay would like to sponsor my endeavors (hint, hint), that would be a different story.&lt;/p&gt;
&lt;p&gt;Perhaps a cheaper alternative would be to go with something like these $20 &lt;a href="http://www.nashbar.com/profile.cfm?category=6000108&amp;amp;subcategory=60001078&amp;amp;brand=&amp;amp;sku=8863&amp;amp;storetype=&amp;amp;estoreid=&amp;amp;pagename=Shop%20by%20Subcat%3A%20ATB%20Clipless%20Pedals"&gt;pedals&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt" src="http://media.achinghead.com/pics/NS-pedal.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Just pull the shinny part off and use the same screws to attach it to my block. Its low profile, should release either direction and is affordable. But, is it usable? At that price one has to wonder. And then there&amp;rsquo;s what I believe is an adjustment screw in the end. How would that work. That&amp;rsquo;s what&amp;rsquo;s so appealing about Speedplay. All the adjustments are in the clip, not the pedal. &lt;/p&gt;
&lt;p&gt;Perhaps there are other solutions I&amp;rsquo;m not aware of. Obviously, something like Crank Brother&amp;rsquo;s &lt;a href="http://www.crankbrothers.com/eggbeater.php"&gt;Eggbeaters&lt;/a&gt; would not work. I&amp;rsquo;m open to suggestions. Speedplay has this handy comparison &lt;a href="http://speedplay.com/index.cfm?fuseaction=home.mtbcompare"&gt;chart&lt;/a&gt;, but it doesn&amp;rsquo;t tell me everything I need to know, and it is biased.&lt;/p&gt;
&lt;p&gt;Just now it occurs to me that I could perhaps use Speedplays road system but mount the clip on the handlebar and the pedal-half on the glove. It would be interesting to try, but there&amp;rsquo;s that obstacle of price again. Therefore, &lt;strong&gt;I&amp;rsquo;m open to anyone sending me old/broken/worn pedals&lt;/strong&gt;. Especially, if, perhaps, the bearings are bad, but the &lt;em&gt;clip still works&lt;/em&gt;. The more styles I have to test, the better. Let me know in the comments or email me at waylan at gmail dot com.&lt;/p&gt;</summary><category term="bicycles"></category><category term="Clipless Glove"></category><category term="prostetics"></category></entry><entry><title>Clipless Glove and The Open Prosthetics Project</title><link href="http://achinghead.com/clipless-glove-and-open-prosthetics-project.html" rel="alternate"></link><updated>2007-07-30T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2007-07-30:clipless-glove-and-open-prosthetics-project.html</id><summary type="html">&lt;p&gt;I just watched a &lt;a href="http://blip.tv/file/322701"&gt;video&lt;/a&gt; from &lt;a href="http://conferences.oreillynet.com/os2007/"&gt;OSCON 2007&lt;/a&gt; discussing &lt;a href="http://conferences.oreillynet.com/cs/os2007/view/e_sess/14649"&gt;open source hardware&lt;/a&gt; by Philip Torrone and Limor Fried. They talked about all sorts of cool things, but something that grabbed my attention was reference to &lt;a href="http://openprosthetics.org"&gt;The Open Prosthetics Project&lt;/a&gt;. I have all my limbs in working order, but my sister had lost part of her right hand in an accident as a child. She has most of her palm, but her thumb and all of her fingers are missing. She was never interested in getting a prosthesis and now, after many years, it very unlikely she would be willing to relearn everything she&amp;rsquo;s learned to do with one hand. Of course, she never has had much success with my favorite pastime &amp;ndash; riding a bicycle.&lt;/p&gt;
&lt;p&gt;Sure, she can rest her palm on the handlebar, and with the right brake lever and shifter switched to the left side she can take an easy, flat route for some distance. But, add some rough terrain or the need to stand up or pull on the handlebars, and its a no-go. She&amp;rsquo;s always been the type of girl you find out playing ball with the boys, so when our father, our brother, myself, and more recently, her husband would come back from our mountain bike excursions all pumped up and covered in mud, she would wish she could have come along.Yeah, my sister rocks! Naturally, we wanted her to come along as well. I had been throwing some ideas around in my head as had my father and brother. Interestingly, when we shared our ideas, they weren&amp;rsquo;t that much different, although mine was a little more developed. Unfortunately, none of us have done anything about it yet.&lt;/p&gt;
&lt;p&gt;Seeing The Open Prosthetics Project has rekindled that desire to find a working solution. As I read every page in their site, the design ideas came flooding back. In the past I had done some searching online for existing solutions and found them all exorbitantly priced. Additionally, they all were for people who were missing most of their lower arm or more. The mechanisms replaced the arm, wrist and possibly the elbow. My sister has no need for that. She simply needs her palm secured to the handlebar so that it doesn&amp;rsquo;t slip off, or so that she can pull for additional leverage while pedaling hard. At the same time, securely tying her hand to the bar would present a safety issue in the event of a crash. She would need to be able to separate from the bike on a moments notice. Additionally, whatever mechanism used can be stationary as she has full use and movement of her wrist, and it should not extend the length of her arm more that an inch or two.&lt;/p&gt;
&lt;p&gt;So, what type of device allows one to push and pull securely, releases quickly, perhaps with a twist, and is relatively thin? If your thinking clipless pedals, you&amp;rsquo;d be right. I&amp;rsquo;ve always imagined some type of glove that either laces up the arm or uses the principle of a Chinese finger trap. The &amp;ldquo;palm&amp;rdquo; of the glove would have a &amp;ldquo;sole&amp;rdquo; with a clip mounted to it. Initially, I considered cutting the handlebar off short and threading a clipless pedal into the end. However, the rotating pedal could make for some sloppy control and as she still has full use of her wrist, would not be necessary. Then, it occurred to me that there isn&amp;rsquo;t any reason the surface of the pedal couldn&amp;rsquo;t be clamped right to the handlebar. I have given that some serious thought and have a pretty sold model in my head. It just needs to be moved paper/screen. The dilemma has always been the issue of the glove. &lt;/p&gt;
&lt;p&gt;Needless to say, seeing OPP&amp;rsquo;s very &lt;a href="http://openprosthetics.org/suspension/10/concept-development"&gt;similar take&lt;/a&gt; on the Chinese finger trap, I am re-motivated to continue pursuing my design. Perhaps with some collaboration with OPP, we can realize a working product. I don&amp;rsquo;t see why slight variations on the glove wouldn&amp;rsquo;t work for others who may be missing just enough of their fingers that it&amp;rsquo;s difficult to hold on. I have downloaded the free &lt;a href="http://www.alibre.com/xpress/software/alibre-design-xpress.asp"&gt;CAD&lt;/a&gt; program OPP recommends and will post more when I have something to show all two of my readers.&lt;/p&gt;</summary><category term="bicycles"></category><category term="Clipless Glove"></category><category term="hacks"></category><category term="hardware"></category><category term="prostetics"></category></entry><entry><title>Daytime Running Lights - With More Control</title><link href="http://achinghead.com/daytime-running-lights-more-control.html" rel="alternate"></link><updated>2006-12-04T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-12-04:daytime-running-lights-more-control.html</id><summary type="html">&lt;p&gt;This is a re-post of the only entry that was worth saving from a failed &lt;a href="http://achinghead.com/archive/63/testing-typo/"&gt;side-blog&lt;/a&gt; I had tried some time ago. This entry was originally, posted on Oct 12, 2005 - over a year ago. The car I speak of here has since been totaled and sent off to the scrap yard after a deer jumped in front of me. Perhaps someday I&amp;rsquo;ll carry out my ideas here on another vehicle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This morning while driving to the office, I was thinking about some differences between my Maxima and my previous car, a 1995 SAAB 9000 CS Turbo (yes, that was quite a change). Specifically daytime running lights. I know there are many differing opinions out there regarding them, but there are also different ways that they can be implemented.&lt;/p&gt;
&lt;p&gt;I like the idea of my lights being on all the time, more than anything else, because of the area in which I live. Here in western New York State (about an hour south of Buffalo) the weather blows in off of Lake Erie after passing over most of the other Great Lakes. Needless to say, it is overcast more than not. In fact, I seem to remember learning at one point, that prior to the present day smog problems WNY was listed among the top &amp;lsquo;most cloudy&amp;rsquo; places in the country. That being the case, it is allot easier to see oncoming traffic when there headlights are on, regardless of the time of day. Over the years I have noticed a definite difference in the number of other drivers who see me on the road depending on whether my light are on or not.&lt;/p&gt;
&lt;p&gt;The 1991 Honda Accord I had before the SAAB did not have daytime running lights. It was around that time that New York State passed the law requiring all cars to have there lights on when the windshield wipers are on. Of course, there are times when it is not raining and everyone should have there lights on, but this was a start. The problem was that I would not always remember to turn my lights on, so I purchased a basic relay that turned my headlights on whenever the ignition was in the &amp;lsquo;ON&amp;rsquo; position. Unfortunately, I would have had to add two more to have the parking lights and taillights come on as well. Not the ideal solution.&lt;/p&gt;
&lt;p&gt;My SAAB, on the other hand, had full featured daytime running lights. When the car was on (ignition in the &amp;lsquo;ON&amp;rsquo; position), the headlights, taillights and parking lights (I think) were all on, albeit not at full brightness. In the event I didn&amp;rsquo;t what them on, for whatever reason (Say, I was working on the car and didn&amp;rsquo;t want the battery to run down), I could just pull the fuse for the daytime running lights, and the lights still worked as normal with the switch. The problem was that I would forget about them at night and wonder why I couldn&amp;rsquo;t see very well. That is until I tried to turn my high beams on and couldn&amp;rsquo;t. After a quick flip of the light switch, the high beams would them work. I soon discovered an easy solution. The lights only had power regardless of the daytime running lights when the ignition was in the &amp;lsquo;ON&amp;rsquo; position. In other words, if the ignition was off (or even at &amp;lsquo;Acc&amp;rsquo; or &amp;lsquo;Start&amp;rsquo;) the lights would be off. That being the case, I just left the light switch on all the time. The only time I had to think about my lights was when I turned my high beams on or off.&lt;/p&gt;
&lt;p&gt;And finally to the point. My Maxima does not have daytime running lights so I&amp;rsquo;m back to square one. I don&amp;rsquo;t really want to have the same situation as I did with my old Accord so I started running a few ideas through my head for a workable solution. This is what I came up with:&lt;/p&gt;
&lt;p&gt;The light switch triggers various relays to turn on the lights throughout the car. What if I intercepted the power line coming from the switch before it reaches any of the relays. Place a relay in line at that point that is triggered by the ignition switch. Use a relay that needs a constant power source from the trigger to stay on. That way, whenever the ignition is in the &amp;lsquo;ON&amp;rsquo; position the circuit would be closed and the lights would work as normal. However, when the ignition is off (or in &amp;lsquo;Start&amp;rsquo; or &amp;lsquo;Acc&amp;rsquo;), the lights would be off regardless of the light switch. That way, I could just leave the light switch on all the time and the lights would turn off with the ignition. And if I wanted to override the system and force the lights off, I could just turn the light switch off. Total control, with little to no effort on my part. Now to work out the details and figure out where to put the relay, assuming I can find a suitable one.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="automobile"></category><category term="electronics"></category></entry><entry><title>Announcing The Markdown CodeHilite Extension</title><link href="http://achinghead.com/announcing-markdown-codehilite-extension.html" rel="alternate"></link><updated>2006-11-27T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-11-27:announcing-markdown-codehilite-extension.html</id><summary type="html">&lt;p&gt;Finally, after many code variations and internal debates over syntax highlighting engines, I am happy to announce that Version 0.1 of the &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt; CodeHilite Extension has been released. You can read all about it and download it from the &lt;a href="http://achinghead.com/markdown/codehilite/"&gt;official page&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I know that some time ago an extension was released that highlighted Python code. However, that extension introduced a new syntax for identifying code blocks (wrapped in brackets [ ]), only worked with Python code, and seems to no longer be available  online. The third problem aside, I wanted to do better. In fact, when that extension was released I already had a working prototype that at that time also only worked with python code. The difference was that mine used regular (indented) code blocks. Unfortunately, at that time, I was sub-classing the &lt;code&gt;Markdown&lt;/code&gt; class (overriding the &lt;code&gt;_processCodeBlock()&lt;/code&gt; function). It worked, but was not ideal and certainly didn&amp;rsquo;t play nice with other extensions&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Therefore, I have kept silent until now.&lt;/p&gt;
&lt;p&gt;At some point after that I was able to get working code that called &lt;a href="http://www.codento.com/people/mtr/genscript/"&gt;GNU Enscript&lt;/a&gt; from the command line. While not the most ideal solution, it would be something that most any *nix system would have available. At that time I devised the syntax for identifying the language of a code block which draws heavily from shebang lines. The &amp;lsquo;colon&amp;rsquo; syntax came from the fact that Markdown originally used two or more colons at the beginning of each line to identify code blocks. It seemed only natural to build on that.&lt;/p&gt;
&lt;p&gt;Then, Yuri released Markdown 1.6 which considerably changed the way extensions were implemented. But then I read this statement in the revised documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Preprocessors, patterns and postprocessors need to then be wrapped together into an extension, which should be implemented as a class that extends markdown.Extension and should over-ride the extendMarkdown() method. extendMarkdown() is called during markdown construction, giving the extension a pointer to the markdown object (the md parameters) and markdown&amp;rsquo;s global variables (md_globals), which in theory gives the extension an option of changing anything it cares to change. However, what it really should be doing is inserting preprocessors, postprocessors and patterns into the markdown pipeline:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The part that caught my eye was that the extension was &amp;lsquo;given a pointer to the markdown object&amp;rsquo;, &amp;ldquo;which in theory gives the extension an option of changing anything it cares to change. &amp;rdquo; Sure enough, &lt;code&gt;extendMarkdown()&lt;/code&gt; is passed &lt;code&gt;md&lt;/code&gt; which is, as far as I can tell, the equivalent of &lt;code&gt;self&lt;/code&gt; within an instance of &lt;code&gt;Markdown()&lt;/code&gt;. As everything is an object in Python, I was easily able to replace/override the &lt;code&gt;_processCodeBlock()&lt;/code&gt; function with my own. This one line (within &lt;code&gt;extendMarkdown()&lt;/code&gt;) did the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_processCodeBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_hiliteCodeBlock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like that, I had a viable solution. I threw in a few configuration settings and was ready to release, with one problem. While Enscript may be a great fall back when nothing else is available, it&amp;rsquo;s not an ideal solution IMHO.&lt;/p&gt;
&lt;p&gt;I recalled that &lt;a href="http://e-scribe.com/news/"&gt;Paul Bisex&lt;/a&gt; had used a javascript solution (&lt;a href="http://www.dreamprojections.com/syntaxhighlighter/Default.aspx"&gt;dp.SyntaxHighlighter&lt;/a&gt;) in the first implementation of his &lt;a href="http://e-scribe.com/news/247"&gt;paste-bin&lt;/a&gt;. While viable, for reasons I shouldn&amp;rsquo;t need to state here, I wouldn&amp;rsquo;t want it to be an only solution. Then, as I&amp;rsquo;m about to give it a go anyway, Paul goes and &lt;a href="http://e-scribe.com/news/299"&gt;changes&lt;/a&gt; his paste-bin to use &lt;a href="http://pygments.pocoo.org/"&gt;Pygments&lt;/a&gt;. Wow, just what I was looking for! Thanks Paul.&lt;/p&gt;
&lt;p&gt;Thus, the CodeHilite extension was born as you know it. I left Enscript support as a fall-back just in case. I left dp.SyntaxHighlighter in for those who want to offer non-highlighted code for all there code blocks in addition to the &amp;lsquo;pretty code&amp;rsquo; (The only real advantage of a client-side solution IMO). And I set Pygments as the default engine. Overall, I&amp;rsquo;m pretty happy with how things turned out.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Other extensions would have needed to extend my new sub-class rather that the &lt;code&gt;Markdown&lt;/code&gt; class. Is would be ridiculous to except other extension authors to build in such support. For that matter, I had no desire to do as much for my &lt;a href="http://achinghead.com/markdown/wikilink/"&gt;other&lt;/a&gt; extension.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Markdown WikiLinks Release 0.2</title><link href="http://achinghead.com/markdown-wikilinks-release-02.html" rel="alternate"></link><updated>2006-08-23T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-08-23:markdown-wikilinks-release-02.html</id><summary type="html">&lt;p&gt;Some time ago I released my &lt;a href="http://achinghead.com/archives/67/adding-wikilinks-to-markdown-in-python/"&gt;first stab&lt;/a&gt; at an extension for &lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-Markdown&lt;/a&gt;. As I said then, I didn&amp;rsquo;t really have any use for it, but it did give me a chance to play with Markdown. To continue that exercise and better understand how best to create extensions for Markdown, I made some improvements to the extension.&lt;/p&gt;
&lt;p&gt;The most obvious problem with my first try was that if one wanted to use the extension with other extensions (in other words; not just calling the provided wrapper function), then the regex would need to be redefined. That is not ideal. After looking at the footnote extension (included with markdown) I realized I needed to define a class which registered the extension. Then one could just create an instance of that class and continue. Brilliant!&lt;/p&gt;
&lt;p&gt;To view the new code and see how it all works, I&amp;rsquo;ll point you to the &lt;a href="http://achinghead.com/markdown/wikilink/"&gt;new page&lt;/a&gt; I created just for the extension. Any additional updates will be made there. And for those that may be interested, I&amp;rsquo;ll announce any major updates here, although I don&amp;rsquo;t anticipate many. That being said, A new and improved way of including extensions was recently &lt;a href="http://sourceforge.net/mailarchive/forum.php?thread_id=29904824&amp;amp;forum_id=48941"&gt;announced&lt;/a&gt; on the mailing list. I suppose I&amp;rsquo;ll be playing with that soon.&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Django Blog and Markdown</title><link href="http://achinghead.com/django-blog-and-markdown.html" rel="alternate"></link><updated>2006-04-18T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-04-18:django-blog-and-markdown.html</id><summary type="html">&lt;p&gt;As I mentioned previously, I wanted to edit my posts in Markdown. I had played with Markdown both in Python and Django before, so it was a rather simple addition, but I wanted it to work without hiccups on different systems with varying needs. Therefore I can up with the following &amp;lsquo;markdown&amp;rsquo; filter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.html&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linebreaks&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linebreaks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;footnotes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdownWithFootnotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, if the Python markdown lib is not installed, generating and ImportError, the &amp;lsquo;escape&amp;rsquo; and &amp;lsquo;linebreaks&amp;rsquo; filters are used instead. That way, if you&amp;rsquo;re using the app on a system without markdown, you&amp;rsquo;ll just have to use html on the source text for entries. If markdown later becomes available, it leaves html alone, so there shouldn&amp;rsquo;t be any problems to speak of.&lt;/p&gt;
&lt;p&gt;When Markdown is available and imports without incident, then we check whether the the footnote extension should be used. I realize I could have just included the footnote extension by default, but it was easy enough to add the flexibility and give template authors the option. In the template just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{{ post.body|markdown:&amp;quot;footnotes&amp;quot; }}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you don&amp;rsquo;t want footnotes, then remove the &amp;ldquo;footnote&amp;rdquo; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{{ post.body|markdown }}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One could easily add options for different extensions. Of course, this would only allow for one extension at a time, but considering that only three extensions are officially listed (one written by myself) besides the included footnotes extension, that&amp;rsquo;s not much of an issue. With just a little more code, I could easily allow the argument to be a list of extensions, but I&amp;rsquo;ll worry about that when there are enough extensions to merit such code.&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>K2 with Django</title><link href="http://achinghead.com/k2-with-django.html" rel="alternate"></link><updated>2006-04-18T00:00:00-04:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-04-18:k2-with-django.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; I first drafted this entry over a month ago and there have been a number of changes to the original source upon which I am building here. Therefore, some of my concerns are not all that relevant. I think it&amp;rsquo;s still interesting nonetheless.&lt;/p&gt;
&lt;p&gt;Some time ago, &lt;a href="http://jay.skabber.com/wordpress/"&gt;Jay Skabber&lt;/a&gt; stated that &lt;a href="http://socialistsoftware.com/post/socialist-software-now-powered-django"&gt;his blog&lt;/a&gt;  was powered by &lt;a href="http://djangoproject.com"&gt;Django&lt;/a&gt;, and used &lt;a href="http://getk2.com"&gt;K2&lt;/a&gt; templates converted to Django&amp;rsquo;s template format. Of course, any one could see at a quick glance that he was using his own styles in place of the default K2 styles. In the spirit of the &lt;a href="http://www.csszengarden.com/"&gt;CSS Zen Garden&lt;/a&gt;, this is part of the beauty of K2. A sound html base is provided that any designer can build upon making it necessary to only provide a new style sheet and images to get a very difference looking site.&lt;/p&gt;
&lt;p&gt;After &lt;a href="http://source.socialistsoftware.com/sssource/"&gt;getting a copy&lt;/a&gt; installed and running on my local test box, the first thing I did was replace Jay&amp;rsquo;s style sheet with the default for K2 along with the necessary images and &lt;strong&gt;Presto!&lt;/strong&gt; just like that, I was looking at K2.&lt;/p&gt;
&lt;p&gt;Unfortunately there were a few problems. I should mention that I started with revision 6 and Jay has made a few updates since then. It became immediately apparent that there were some glaring validation warnings. A quick perusal through the code easily cleaned them up. As an example, Jay had inserted the main body text of a post like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&amp;lt;p&amp;gt;{{ post.body|escape|linebreaks }}&amp;lt;/p&amp;gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The fact that he was using the &lt;code&gt;linebreaks&lt;/code&gt; filter should be a dead giveaway as to what the problem was. &lt;code&gt;Linebreaks&lt;/code&gt; wraps each newline in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags. However, you can&amp;rsquo;t wrap a bunch of paragraphs in another paragraph. Removing those &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags from the template solved the issue easily enough.&lt;/p&gt;
&lt;p&gt;While looking at the template files, it came to my attention that there were various blocks of code that Jay had commented out as he was not using them. While not a problem in itself, they were statically rendered in the template without the proper data being provided dynamicly. As an example, wrong trackback links were being given in the html source among other such unused services. While everything looks good to the human reader, robots could easily become confused. Therefore, I removed such sections of code. I also completely removed the code for Digg and Technorati, as I have no interest in using either.&lt;/p&gt;
&lt;p&gt;Another obvious difference is that K2 uses relative dates while Jay used exact dates formatted to his preferences. Personally, I like the relative dates. As Django already provides the &lt;code&gt;timesince&lt;/code&gt; filter, this was easy as pie to change. All I had to do was replace the &lt;code&gt;date&lt;/code&gt; filter and format with a call to &lt;code&gt;timesince&lt;/code&gt; and add the word &amp;ldquo;ago&amp;rdquo; after the date to create a proper English sentence. For kicks, you can get the exact date by hovering over the relative date on the single post page. &lt;/p&gt;
&lt;p&gt;While I was playing with dates, I figured I&amp;rsquo;d use relative dates for the comments as well&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. However, I didn&amp;rsquo;t care how long ago the comment was made, but rather, how long after the blog entry was first posted that the comment was added. Upon looking at the code in &lt;code&gt;django/utils/timesince.py&lt;/code&gt; I discovered that there is a little wrapper function &lt;code&gt;timeuntil()&lt;/code&gt;, that calls &lt;code&gt;timesince()&lt;/code&gt; with the start and end dates switched. For some reason there is no filter for &lt;code&gt;timeuntil&lt;/code&gt;. Of course, creating one would be easy enough, but that doesn&amp;rsquo;t quite do what I wanted. However, I realized that the same principle could easily be used in another filter which passed along both the date and time the blog entry was posted and the date and time of the comment. Thus, the &lt;code&gt;timebetween&lt;/code&gt; filter was born, which finds the time between any two dates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timebetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Formats a date as the time between two dates (i.e. &amp;quot;4 days, 6 hours&amp;quot;)&amp;#39;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.timesince&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timesince&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timesince&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;timebetween&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timebetween&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Call &lt;code&gt;timebetween&lt;/code&gt; in the template like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;Posted &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;{{ post.pub_date|timebetween:comment.submit_date }}&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt; later.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That satisfied me enough to say I have a closer representation of the K2 templates. Of course, there are some glaring omissions such as no rss feeds for comments, no recent comments in the sidebar, no trackback/pingback support, and no archive pages by date. With the exception of the trackback/pingback support, everything should be simple enough to implement; however, it wasn&amp;rsquo;t quite as high on my priority list as something else; namely Markdown. But that is another post for another time; as is how I&amp;rsquo;m getting my del.icio.us links.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Yes, I realize that K2 does not use relative dates for the comments by default. However, I chose to add them to see how easy it would be. Besides, I like them better anyway. They have allot more meaning, especially when the date for the blog entry is in a relative format. It&amp;rsquo;s that much more difficult to get a sense of the time that has gone by without an exact time on each end of the equation. Additionally, I didn&amp;rsquo;t add in the author&amp;rsquo;s name for each post, which seems redundant as I would be the only author on my own blog. No doubt Jay had similar reason&amp;rsquo;s for omitting that bit of information as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Enhancing Django Wikiproject Part 1 - Adding Authentication</title><link href="http://achinghead.com/enhancing-django-wikiproject-part-1-adding-authent.html" rel="alternate"></link><updated>2006-01-20T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-01-20:enhancing-django-wikiproject-part-1-adding-authent.html</id><summary type="html">&lt;p&gt;In playing with, and trying to learn &lt;a href="http://www.djangoproject.com/" title="Ubber Cool Python Web-Framework"&gt;Django&lt;/a&gt;, I've been tampering with &lt;a href="http://e-scribe.com/news/"&gt;Paul Bisex&lt;/a&gt;'s &lt;a href="http://e-scribe.com/news/171"&gt;wikiproject&lt;/a&gt;. While he stated that he doubt's anyone would actually want to use his simple creation, I saw potential. There were a few minor improvments that I imedietly saw, but I'll get to those later.
&lt;/p&gt;

&lt;p&gt;The first thing I want to dicuss is what I see as a nessecary step in any content that can potentially be edited by anyone with internet access. Your just asking to be spammed without any safeguards in place. The easiest is a simple authentication system. This is even easier with Django's built in &lt;a href="http://www.djangoproject.com/documentation/authentication/" title="User authentication in Django"&gt;user authentication system&lt;/a&gt;. While we could set up groups and set permission levels, a super simple wiki only needs one permission - edit. That being the case, we only need to allow editing if a user is logged in, regardless of permissions. According to the &lt;a href="http://www.djangoproject.com/documentation/authentication/#the-raw-way" title="The raw way"&gt;docs&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The simple, raw way to limit access to pages is to check &lt;code&gt;request.user.is_anonymous()&lt;/code&gt; and ... display an error message.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if a user is logged in, everything should work as normal. However, if a request is made for a non-existant page by an anonymous (not logged in) user, then they should not be given the opportunity to edit the page. While some choose to redirect to a login page here, I prefer the 404 Not Found HTTP Response Header. That allows no room for confusion&lt;sup id="fnr1-548444471"&gt;&lt;a href="#fn1-548444471"&gt;1&lt;/a&gt;&lt;/sup&gt; among users or search engines. This is easy enough with the &lt;a href="http://www.djangoproject.com/documentation/request_response/#httpresponse-subclasses" title="HttpResponse subclasses"&gt;HttpResponse subclass&lt;/a&gt; &lt;code&gt;HttpResponseNotFound&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;First we need to import &lt;code&gt;HttpResponseNotFound&lt;/code&gt; so let's add it to the first line of views.py:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.utils.httpwrappers import HttpResponse, HttpResponseRedirect, HttpResponseNotFound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, alter the &lt;code&gt;page&lt;/code&gt; view as follows:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def page(request, title):
    &amp;quot;Display page, 404 Not Found error, or create page if logged in&amp;quot;
    try:
        page = wikipages.get_object(title__exact=title)
        return render_to_response('page', locals())
    except wikipages.WikipageDoesNotExist:
        if request.user.is_anonymous():
            # send 404 Not Found
            return HttpResponseNotFound()
        else:
            # create a dummy page object
            page = wikipages.Wikipage()
            page.title = title
            return render_to_response('edit', locals())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first I was going to do the same thing for the &lt;code&gt;edit&lt;/code&gt; view, but return a 403 Forbidden HTTP Response Header. However, it occured to me that when an edit is expressly requested, redirecting to a login page would be more intuitive. This, as usual, is super easy with Django. As the &lt;a href="http://www.djangoproject.com/documentation/authentication/#the-login-required-decorator" title="The login_required decorator"&gt;docs&lt;/a&gt; point out:
&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As a shortcut, you can use the convenient &lt;code&gt;login_required&lt;/code&gt; decorator.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Its that easy. The trick is that the syntax is different for Python versions 2.3 and 2.4 but either way, its only one line of code outside the &lt;code&gt;edit&lt;/code&gt; view. First, we need to import it:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.views.decorators.auth import login_required
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 2.3:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def edit(request, title):
    # ...
edit = login_required(edit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 2.4:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@login_required
def edit(request, title):
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which brings us to the next step; a login page. As &lt;code&gt;login_required&lt;/code&gt; automaticly redirects to &lt;code&gt;/accounts/login/&lt;/code&gt;, we will need to create a login page accordingly. First, we need to tell Django what to do with that url, so open &lt;code&gt;url.py&lt;/code&gt; and add the following as the first listing:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(r'^accounts/login/', 'django.views.auth.login.login'),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, we are actually using the view code built right into Django, which means less work for us - generally a good thing. That view code calls a template &lt;code&gt;registration/login.html&lt;/code&gt;. Of course, that does not exist, but we can use the Admin app default as a base. You should find these at &lt;code&gt;...django_src/django/contrib/admin/templates/&lt;/code&gt;. I choose to copy that &lt;code&gt;templates/&lt;/code&gt; directory in its entirety to my &lt;code&gt;wikiproject/&lt;/code&gt; directory. You may want to browse around and see what you may find useful in there and delete what you won't need.&lt;sup id="fnr2-548444471"&gt;&lt;a href="#fn2-548444471"&gt;2&lt;/a&gt;&lt;/sup&gt; Before deleting the &lt;code&gt;admin/&lt;/code&gt; directory, make sure to copy login.html from there to &lt;code&gt;registration/&lt;/code&gt;, which, of course we do NOT want to delete as it contains the templates we need.
&lt;/p&gt;

&lt;p&gt;Now we need to tell Django were to find these templates. Open the settings.py file and add the following to &lt;code&gt;TEMPLATE_DIRS&lt;/code&gt; 
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'templates/',
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These templates extend the Admin base template and if you have the admin app enabled they will work now with the Admin styling. Go ahead and give them a test.&lt;sup id="fnr3-548444471"&gt;&lt;a href="#fn3-548444471"&gt;3&lt;/a&gt;&lt;/sup&gt; Type the url to edit a page directly into the browser's address bar, and you should be redirected to the login page. Assuming you have created a user&lt;sup id="fnr4-548444471"&gt;&lt;a href="#fn4-548444471"&gt;4&lt;/a&gt;&lt;/sup&gt;, enter that username and password and submit. You should be redirected to the edit form for your page.
&lt;/p&gt;

&lt;p&gt;Of course, who wants the admin style only for a login page used by non-admins?&lt;sup id="fnr5-548444471"&gt;&lt;a href="#fn5-548444471"&gt;5&lt;/a&gt;&lt;/sup&gt; Open &lt;code&gt;registration/login.html&lt;/code&gt; and alter the first line to extend our wiki's base:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}{% extends &amp;quot;base&amp;quot; %}{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we don't have any need for the breadcrumb stuff, we can remove that line:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}{% block breadcrumbs %}{% endblock %}{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While your at it, you may want to make a few other adjustments to the markup to fit in with your preferred style.&lt;sup id="fnr6-548444471"&gt;&lt;a href="#fn6-548444471"&gt;6&lt;/a&gt;&lt;/sup&gt; 
&lt;/p&gt;

&lt;p&gt;Users can now log in, but they need to be able to log out. We just need to do the same thing as we did for logging in. In urls.py add the following:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(r'^accounts/logout/', 'django.views.auth.login.logout'),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make the same changes to &lt;code&gt;registration/logged_out.html&lt;/code&gt; as you did to &lt;code&gt;registration/login.html&lt;/code&gt;. While you're at it, you may want to adjust the url to 'log back in' so it points to &lt;code&gt;/accounts/login/&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;The only thing left is to add a login/out link to our templates, add edit links to the index page (which only display for logged in users) and we have a much more useful wiki. It's even starting to look like something I would use for my own personal site. Especially if I used &lt;a href="http://www.freewisdom.org/projects/python-markdown/" title="Markdown in Python"&gt;Markdown&lt;/a&gt; instead of Paul's WikiLinks. As I've noted previously, I could even &lt;a href="http://achinghead.com/archives/67/adding-wikilinks-to-markdown-in-python/" title="Adding WikiLinks to Markdown in Python"&gt;combine the two&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Feel free to use the code I have provided here. As with Paul's, consider it licenced under the MIT Licence. And look for Part 2 were I go over a number of little things that really clean it up and make it easy to use.
&lt;/p&gt;

&lt;div class="footnote"&gt;&lt;hr /&gt;&lt;ol&gt;
 &lt;li id="fn1-548444471"&gt;
     One could always include a link to a login page in their custom error page. You do have custom error pages don't you? Whether such is left to the http server, of handled by Django shouldn't matter. With a few modifications to your server settings (perhaps in Apache's .htaccess file) or to my code this should be easy enough, but is left as an exersize for the reader. Perhaps I'll include that in part 2. &lt;a href="#fnr1-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
 &lt;/li&gt;

 &lt;li id="fn2-548444471"&gt;
     My understanding is that if one desires to customize or alter the Admin templates for use with the Admin app, the same practice would be followed and all edits would take place on this copy. As an aside, you may also note that 404 and 405 error templates are available here and can be easily adapted to work with the previous footnote. &lt;a href="#fnr2-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
 &lt;/li&gt;

 &lt;li id="fn3-548444471"&gt;
     I should mention that I have been testing this all along by using the admin app to log in and out from another browser tab. As both tabs use the same session data, it works fine, but is not really an ideal situation. Besides, you may not want to give page editors access to the admin interface, which you use to add and delete users. This way, they can still log in without ever seeing the admin interface. Just make sure they have no admin privliges when you create their account. Remember, our little wiki app only checks if they are logged in, but never checks what permissions they have, so you could give them no permisions but they can still edit wikipages as long as they can log in. &lt;a href="#fnr3-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
 &lt;/li&gt;

 &lt;li id="fn4-548444471"&gt;
     If you havn't done so already, create a superuser from the command line by doing:
&lt;pre&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will then be prompted for a username, email address and password. &lt;a href="#fnr4-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
&lt;/p&gt;
 &lt;/li&gt;

 &lt;li id="fn5-548444471"&gt;
     You may actually want to leave the admin styling in tact, as the admin interface will use these altered templates over the defaults we copied them from. If you follow the last few steps here, the login and logout pages for the admin will match the styling of the wiki no matter what app in the project you may be using the admin interface for. I'm not aware of, not did I look for an easy workaround. Consider yourself warned. &lt;a href="#fnr5-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
 &lt;/li&gt;

 &lt;li id="fn6-548444471"&gt;
     For example, I edited all the templates to use a title block so that the page title and/or the action (edit, login) was displayed at the top of the browser window/tab. &lt;a href="#fnr6-548444471" class="footnoteBackLink" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;
 &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="markdown"></category><category term="python"></category></entry><entry><title>Adding WikiLinks to Markdown in Python</title><link href="http://achinghead.com/adding-wikilinks-to-markdown-in-python.html" rel="alternate"></link><updated>2006-01-15T00:00:00-05:00</updated><author><name>Waylan Limberg</name></author><id>tag:achinghead.com,2006-01-15:adding-wikilinks-to-markdown-in-python.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; For the latest on this see the &lt;a href="http://achinghead.com/markdown/wikilink/"&gt;page&lt;/a&gt; I created.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been playing with &lt;a href='http://www.djangoproject.com/'&gt;Django&lt;/a&gt; lately and really like it. I&amp;rsquo;ve wanted to create some sort of paging system where I can create new pages and easily edit their content. Basically a cross between a wiki and Wordpress pages. Django seemed like the easiest way for me to do this. Add to that, I really prefer &lt;a href='http://daringfireball.net/projects/markdown/syntax'&gt;Markdown syntax&lt;/a&gt; to any other such markup language.&lt;/p&gt;
&lt;p&gt;It was with this in mind that I took a look at &lt;a href='http://e-scribe.com/news/'&gt;Paul Bissex&lt;/a&gt;&amp;lsquo;s &lt;a href='http://e-scribe.com/news/171'&gt;wikiproject&lt;/a&gt;. The basics are certainly there. And with little effort, I was able to get Markdown, along with the basic wikilinks working. The problem was that the wikilink code had no way of knowing to skip over various parts of the Markdown syntax. That means that Markdown needs to be extended to support wikilinks. It just so happens that the &lt;a href='http://www.freewisdom.org/projects/python-markdown/'&gt;markdown lib for python&lt;/a&gt; makes this easy. After only a little head scratching I was able to come up with the following code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WikiLinks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasePattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handleMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;WIKI_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;WIKI_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIKI_LABEL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WIKI_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wikilink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wikiMarkdown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;WIKILINK_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;\b(([A-Z]+[a-z]+){2,})\b&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinePatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WikiLinks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIKILINK_RE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I should note that the above code is in no way connected to Django. It should be easily adapted to work for any python project. It is also possible that the URL and LABEL would need to be further manipulated for your projects needs. This shouldn&amp;rsquo;t be to difficult either. But let&amp;rsquo;s get the basics working first. So, how about a quick test?:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;WikiLink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`http://example.com/RealLink`&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;RealLink&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MarkdownLink&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MarkdownLink&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A MarkdownLink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;completeness&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;wikiMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;&amp;lt;p&amp;gt;Some text with a &amp;lt;a href=&amp;quot;/WikiLink/&amp;quot; class=&amp;quot;wikilink&amp;quot;&amp;gt;WikiLink&amp;lt;/a&amp;gt;.&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;p&amp;gt;And a &amp;lt;a href=`http://example.com/RealLink`&amp;gt; &amp;lt;a href=&amp;quot;/RealLink/&amp;quot; class=&amp;quot;wikilink&amp;quot;&amp;gt;RealLink&amp;lt;/a&amp;gt; &amp;lt;/a&amp;gt;.&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;p&amp;gt;And a &amp;lt;a href=&amp;quot;/MarkdownLink/&amp;quot; title=&amp;quot;A MarkdownLink&amp;quot;&amp;gt;MarkdownLink&amp;lt;/a&amp;gt; for completeness.&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, my understanding is that markdown is supposed to leave HTML alone. However, that doesn&amp;rsquo;t quite happen here as evidenced by the &amp;ldquo;RealLink&amp;rdquo;. Whether this is a problem with my code or a bug in python&amp;rsquo;s markdown  lib I don&amp;rsquo;t know. Either way, I did a bunch more tests, but this seems to be the only problem I could find. That, and I need a way to escape CamelCase words that I do not want WikiLinked (like PhD&amp;hellip;). In the end, I decided that in reality, I would rather explicitly mark each link as such and never have to worry about inadvertent links sneaking into my text. With markdown, creating links is easy enough, and with Markdown&amp;rsquo;s referenced links, the text is plenty easy to read as source. So, in the end, I have decided to not use the above code. That being said, someone else may find it useful.&lt;/p&gt;
&lt;p&gt;If you would like to use my code, consider it licensed the same as Markdown in Python (dual-licensed under &lt;a href='http://www.gnu.org/copyleft/gpl.html'&gt;GPL&lt;/a&gt; and &lt;a href='http://www.opensource.org/licenses/bsd-license.php'&gt;BSD License&lt;/a&gt; - no, I didn&amp;rsquo;t really put much thought into that). You can download the source as &lt;a href='/code/wikiMarkdown.py'&gt;wikiMarkdown.py&lt;/a&gt;. Copy the file to a directory in your PYTHONPATH and do the following (assuming you have Markdown in Python installed and working):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wikiMarkdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;wm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wikiMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YOURTEXTSOURCE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Happy wikilinking with Markdown!&lt;/p&gt;</summary><category term="markdown"></category><category term="python"></category></entry></feed>